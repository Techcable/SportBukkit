From 2b4e2ce9517be4bd59cbe711427c838d0351ca70 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 1 Mar 2016 04:32:08 -0500
Subject: [PATCH] Import necessary NMS classes


diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
new file mode 100644
index 0000000..6654240
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -0,0 +1,75 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockFalling extends Block {
+
+    public static boolean instaFall;
+
+    public BlockFalling() {
+        super(Material.SAND);
+        this.a(CreativeModeTab.b);
+    }
+
+    public BlockFalling(Material material) {
+        super(material);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        world.a(blockposition, (Block) this, this.a(world));
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        world.a(blockposition, (Block) this, this.a(world));
+    }
+
+    public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
+        if (!world.isClientSide) {
+            this.b(world, blockposition);
+        }
+
+    }
+
+    private void b(World world, BlockPosition blockposition) {
+        if (i(world.getType(blockposition.down())) && blockposition.getY() >= 0) {
+            byte b0 = 32;
+
+            if (!BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-b0, -b0, -b0), blockposition.a(b0, b0, b0))) {
+                if (!world.isClientSide) {
+                    EntityFallingBlock entityfallingblock = new EntityFallingBlock(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
+
+                    this.a(entityfallingblock);
+                    world.addEntity(entityfallingblock);
+                }
+            } else {
+                world.setAir(blockposition);
+
+                BlockPosition blockposition1;
+
+                for (blockposition1 = blockposition.down(); i(world.getType(blockposition1)) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
+                    ;
+                }
+
+                if (blockposition1.getY() > 0) {
+                    world.setTypeUpdate(blockposition1.up(), this.getBlockData());
+                }
+            }
+
+        }
+    }
+
+    protected void a(EntityFallingBlock entityfallingblock) {}
+
+    public int a(World world) {
+        return 2;
+    }
+
+    public static boolean i(IBlockData iblockdata) {
+        Block block = iblockdata.getBlock();
+        Material material = iblockdata.getMaterial();
+
+        return block == Blocks.FIRE || material == Material.AIR || material == Material.WATER || material == Material.LAVA;
+    }
+
+    public void a_(World world, BlockPosition blockposition) {}
+}
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
new file mode 100644
index 0000000..675cdc0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -0,0 +1,224 @@
+package net.minecraft.server;
+
+import java.util.Iterator;
+import java.util.Random;
+
+public abstract class BlockFluids extends Block {
+
+    public static final BlockStateInteger LEVEL = BlockStateInteger.of("level", 0, 15);
+
+    protected BlockFluids(Material material) {
+        super(material);
+        this.w(this.blockStateList.getBlockData().set(BlockFluids.LEVEL, Integer.valueOf(0)));
+        this.a(true);
+    }
+
+    public AxisAlignedBB a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return BlockFluids.j;
+    }
+
+    public AxisAlignedBB a(IBlockData iblockdata, World world, BlockPosition blockposition) {
+        return BlockFluids.k;
+    }
+
+    public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return this.material != Material.LAVA;
+    }
+
+    public static float e(int i) {
+        if (i >= 8) {
+            i = 0;
+        }
+
+        return (float) (i + 1) / 9.0F;
+    }
+
+    protected int c(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return iblockaccess.getType(blockposition).getMaterial() == this.material ? ((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL)).intValue() : -1;
+    }
+
+    protected int d(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        int i = this.c(iblockaccess, blockposition);
+
+        return i >= 8 ? 0 : i;
+    }
+
+    public boolean c(IBlockData iblockdata) {
+        return false;
+    }
+
+    public boolean b(IBlockData iblockdata) {
+        return false;
+    }
+
+    public boolean a(IBlockData iblockdata, boolean flag) {
+        return flag && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0;
+    }
+
+    public boolean a(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
+        Material material = iblockaccess.getType(blockposition).getMaterial();
+
+        return material == this.material ? false : (enumdirection == EnumDirection.UP ? true : (material == Material.ICE ? false : super.a(iblockaccess, blockposition, enumdirection)));
+    }
+
+    public EnumRenderType a(IBlockData iblockdata) {
+        return EnumRenderType.LIQUID;
+    }
+
+    public Item getDropType(IBlockData iblockdata, Random random, int i) {
+        return null;
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+
+    protected Vec3D f(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        double d0 = 0.0D;
+        double d1 = 0.0D;
+        double d2 = 0.0D;
+        int i = this.d(iblockaccess, blockposition);
+        BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
+        Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
+
+        while (iterator.hasNext()) {
+            EnumDirection enumdirection = (EnumDirection) iterator.next();
+
+            blockposition_pooledblockposition.h(blockposition).c(enumdirection);
+            int j = this.d(iblockaccess, blockposition_pooledblockposition);
+            int k;
+
+            if (j < 0) {
+                if (!iblockaccess.getType(blockposition_pooledblockposition).getMaterial().isSolid()) {
+                    j = this.d(iblockaccess, blockposition_pooledblockposition.down());
+                    if (j >= 0) {
+                        k = j - (i - 8);
+                        d0 += (double) (enumdirection.getAdjacentX() * k);
+                        d1 += (double) (enumdirection.getAdjacentY() * k);
+                        d2 += (double) (enumdirection.getAdjacentZ() * k);
+                    }
+                }
+            } else if (j >= 0) {
+                k = j - i;
+                d0 += (double) (enumdirection.getAdjacentX() * k);
+                d1 += (double) (enumdirection.getAdjacentY() * k);
+                d2 += (double) (enumdirection.getAdjacentZ() * k);
+            }
+        }
+
+        Vec3D vec3d = new Vec3D(d0, d1, d2);
+
+        if (((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL)).intValue() >= 8) {
+            Iterator iterator1 = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
+
+            while (iterator1.hasNext()) {
+                EnumDirection enumdirection1 = (EnumDirection) iterator1.next();
+
+                blockposition_pooledblockposition.h(blockposition).c(enumdirection1);
+                if (this.a(iblockaccess, (BlockPosition) blockposition_pooledblockposition, enumdirection1) || this.a(iblockaccess, blockposition_pooledblockposition.up(), enumdirection1)) {
+                    vec3d = vec3d.a().add(0.0D, -6.0D, 0.0D);
+                    break;
+                }
+            }
+        }
+
+        blockposition_pooledblockposition.t();
+        return vec3d.a();
+    }
+
+    public Vec3D a(World world, BlockPosition blockposition, Entity entity, Vec3D vec3d) {
+        return vec3d.e(this.f(world, blockposition));
+    }
+
+    public int a(World world) {
+        return this.material == Material.WATER ? 5 : (this.material == Material.LAVA ? (world.worldProvider.m() ? 10 : 30) : 0);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        this.e(world, blockposition, iblockdata);
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        this.e(world, blockposition, iblockdata);
+    }
+
+    public boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        if (this.material == Material.LAVA) {
+            boolean flag = false;
+            EnumDirection[] aenumdirection = EnumDirection.values();
+            int i = aenumdirection.length;
+
+            for (int j = 0; j < i; ++j) {
+                EnumDirection enumdirection = aenumdirection[j];
+
+                if (enumdirection != EnumDirection.DOWN && world.getType(blockposition.shift(enumdirection)).getMaterial() == Material.WATER) {
+                    flag = true;
+                    break;
+                }
+            }
+
+            if (flag) {
+                Integer integer = (Integer) iblockdata.get(BlockFluids.LEVEL);
+
+                if (integer.intValue() == 0) {
+                    world.setTypeUpdate(blockposition, Blocks.OBSIDIAN.getBlockData());
+                    this.fizz(world, blockposition);
+                    return true;
+                }
+
+                if (integer.intValue() <= 4) {
+                    world.setTypeUpdate(blockposition, Blocks.COBBLESTONE.getBlockData());
+                    this.fizz(world, blockposition);
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    protected void fizz(World world, BlockPosition blockposition) {
+        double d0 = (double) blockposition.getX();
+        double d1 = (double) blockposition.getY();
+        double d2 = (double) blockposition.getZ();
+
+        world.a((EntityHuman) null, blockposition, SoundEffects.db, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+
+        for (int i = 0; i < 8; ++i) {
+            world.addParticle(EnumParticle.SMOKE_LARGE, d0 + Math.random(), d1 + 1.2D, d2 + Math.random(), 0.0D, 0.0D, 0.0D, new int[0]);
+        }
+
+    }
+
+    public IBlockData fromLegacyData(int i) {
+        return this.getBlockData().set(BlockFluids.LEVEL, Integer.valueOf(i));
+    }
+
+    public int toLegacyData(IBlockData iblockdata) {
+        return ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue();
+    }
+
+    protected BlockStateList getStateList() {
+        return new BlockStateList(this, new IBlockState[] { BlockFluids.LEVEL});
+    }
+
+    public static BlockFlowing a(Material material) {
+        if (material == Material.WATER) {
+            return Blocks.FLOWING_WATER;
+        } else if (material == Material.LAVA) {
+            return Blocks.FLOWING_LAVA;
+        } else {
+            throw new IllegalArgumentException("Invalid material");
+        }
+    }
+
+    public static BlockStationary b(Material material) {
+        if (material == Material.WATER) {
+            return Blocks.WATER;
+        } else if (material == Material.LAVA) {
+            return Blocks.LAVA;
+        } else {
+            throw new IllegalArgumentException("Invalid material");
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
new file mode 100644
index 0000000..54140f7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -0,0 +1,98 @@
+package net.minecraft.server;
+
+public class BlockTNT extends Block {
+
+    public static final BlockStateBoolean EXPLODE = BlockStateBoolean.of("explode");
+
+    public BlockTNT() {
+        super(Material.TNT);
+        this.w(this.blockStateList.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf(false)));
+        this.a(CreativeModeTab.d);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        super.onPlace(world, blockposition, iblockdata);
+        if (world.isBlockIndirectlyPowered(blockposition)) {
+            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+            world.setAir(blockposition);
+        }
+
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        if (world.isBlockIndirectlyPowered(blockposition)) {
+            this.postBreak(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)));
+            world.setAir(blockposition);
+        }
+
+    }
+
+    public void wasExploded(World world, BlockPosition blockposition, Explosion explosion) {
+        if (!world.isClientSide) {
+            EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), explosion.getSource());
+
+            entitytntprimed.setFuseTicks((short) (world.random.nextInt(entitytntprimed.getFuseTicks() / 4) + entitytntprimed.getFuseTicks() / 8));
+            world.addEntity(entitytntprimed);
+        }
+    }
+
+    public void postBreak(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        this.a(world, blockposition, iblockdata, (EntityLiving) null);
+    }
+
+    public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving) {
+        if (!world.isClientSide) {
+            if (((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue()) {
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), entityliving);
+
+                world.addEntity(entitytntprimed);
+                world.a((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.gj, SoundCategory.BLOCKS, 1.0F, 1.0F);
+            }
+
+        }
+    }
+
+    public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, ItemStack itemstack, EnumDirection enumdirection, float f, float f1, float f2) {
+        if (itemstack != null && (itemstack.getItem() == Items.FLINT_AND_STEEL || itemstack.getItem() == Items.FIRE_CHARGE)) {
+            this.a(world, blockposition, iblockdata.set(BlockTNT.EXPLODE, Boolean.valueOf(true)), (EntityLiving) entityhuman);
+            world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 11);
+            if (itemstack.getItem() == Items.FLINT_AND_STEEL) {
+                itemstack.damage(1, entityhuman);
+            } else if (!entityhuman.abilities.canInstantlyBuild) {
+                --itemstack.count;
+            }
+
+            return true;
+        } else {
+            return super.interact(world, blockposition, iblockdata, entityhuman, enumhand, itemstack, enumdirection, f, f1, f2);
+        }
+    }
+
+    public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
+        if (!world.isClientSide && entity instanceof EntityArrow) {
+            EntityArrow entityarrow = (EntityArrow) entity;
+
+            if (entityarrow.isBurning()) {
+                this.a(world, blockposition, world.getType(blockposition).set(BlockTNT.EXPLODE, Boolean.valueOf(true)), entityarrow.shooter instanceof EntityLiving ? (EntityLiving) entityarrow.shooter : null);
+                world.setAir(blockposition);
+            }
+        }
+
+    }
+
+    public boolean a(Explosion explosion) {
+        return false;
+    }
+
+    public IBlockData fromLegacyData(int i) {
+        return this.getBlockData().set(BlockTNT.EXPLODE, Boolean.valueOf((i & 1) > 0));
+    }
+
+    public int toLegacyData(IBlockData iblockdata) {
+        return ((Boolean) iblockdata.get(BlockTNT.EXPLODE)).booleanValue() ? 1 : 0;
+    }
+
+    protected BlockStateList getStateList() {
+        return new BlockStateList(this, new IBlockState[] { BlockTNT.EXPLODE});
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GameProfileBanList.java b/src/main/java/net/minecraft/server/GameProfileBanList.java
new file mode 100644
index 0000000..737035b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GameProfileBanList.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class GameProfileBanList extends JsonList<GameProfile, GameProfileBanEntry> {
+
+    public GameProfileBanList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry<GameProfile> a(JsonObject jsonobject) {
+        return new GameProfileBanEntry(jsonobject);
+    }
+
+    public boolean isBanned(GameProfile gameprofile) {
+        return this.d(gameprofile);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        GameProfileBanEntry gameprofilebanentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) gameprofilebanentry.getKey()).getName()) {
+            gameprofilebanentry = (GameProfileBanEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    protected String b(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        GameProfileBanEntry gameprofilebanentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            gameprofilebanentry = (GameProfileBanEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) gameprofilebanentry.getKey()).getName()));
+
+        return (GameProfile) gameprofilebanentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.b((GameProfile) object);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 0000000..d67c4c0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,824 @@
+package net.minecraft.server;
+
+import com.google.common.base.Function;
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+
+public class Item {
+
+    public static final RegistryMaterials<MinecraftKey, Item> REGISTRY = new RegistryMaterials();
+    private static final Map<Block, Item> a = Maps.newHashMap();
+    private static final IDynamicTexture b = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture c = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture d = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture e = new IDynamicTexture() {
+    };
+    private final IRegistry<MinecraftKey, IDynamicTexture> m = new RegistrySimple();
+    protected static final UUID g = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
+    protected static final UUID h = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
+    private CreativeModeTab n;
+    protected static Random i = new Random();
+    protected int maxStackSize = 64;
+    private int durability;
+    protected boolean k;
+    protected boolean l;
+    private Item craftingResult;
+    private String name;
+
+    public static int getId(Item item) {
+        return item == null ? 0 : Item.REGISTRY.a((Object) item);
+    }
+
+    public static Item getById(int i) {
+        return (Item) Item.REGISTRY.getId(i);
+    }
+
+    public static Item getItemOf(Block block) {
+        return (Item) Item.a.get(block);
+    }
+
+    public static Item d(String s) {
+        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(s));
+
+        if (item == null) {
+            try {
+                return getById(Integer.parseInt(s));
+            } catch (NumberFormatException numberformatexception) {
+                ;
+            }
+        }
+
+        return item;
+    }
+
+    public final void a(MinecraftKey minecraftkey, IDynamicTexture idynamictexture) {
+        this.m.a(minecraftkey, idynamictexture);
+    }
+
+    public boolean a(NBTTagCompound nbttagcompound) {
+        return false;
+    }
+
+    public Item() {
+        this.a(new MinecraftKey("lefthanded"), Item.d);
+        this.a(new MinecraftKey("cooldown"), Item.e);
+    }
+
+    public Item d(int i) {
+        this.maxStackSize = i;
+        return this;
+    }
+
+    public EnumInteractionResult a(ItemStack itemstack, EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+        return EnumInteractionResult.PASS;
+    }
+
+    public float getDestroySpeed(ItemStack itemstack, IBlockData iblockdata) {
+        return 1.0F;
+    }
+
+    public InteractionResultWrapper<ItemStack> a(ItemStack itemstack, World world, EntityHuman entityhuman, EnumHand enumhand) {
+        return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityLiving entityliving) {
+        return itemstack;
+    }
+
+    public int getMaxStackSize() {
+        return this.maxStackSize;
+    }
+
+    public int filterData(int i) {
+        return 0;
+    }
+
+    public boolean k() {
+        return this.l;
+    }
+
+    protected Item a(boolean flag) {
+        this.l = flag;
+        return this;
+    }
+
+    public int getMaxDurability() {
+        return this.durability;
+    }
+
+    protected Item setMaxDurability(int i) {
+        this.durability = i;
+        if (i > 0) {
+            this.a(new MinecraftKey("damaged"), Item.b);
+            this.a(new MinecraftKey("damage"), Item.c);
+        }
+
+        return this;
+    }
+
+    public boolean usesDurability() {
+        return this.durability > 0 && (!this.l || this.maxStackSize == 1);
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, World world, IBlockData iblockdata, BlockPosition blockposition, EntityLiving entityliving) {
+        return false;
+    }
+
+    public boolean canDestroySpecialBlock(IBlockData iblockdata) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, EntityLiving entityliving, EnumHand enumhand) {
+        return false;
+    }
+
+    public Item n() {
+        this.k = true;
+        return this;
+    }
+
+    public Item c(String s) {
+        this.name = s;
+        return this;
+    }
+
+    public String j(ItemStack itemstack) {
+        String s = this.f_(itemstack);
+
+        return s == null ? "" : LocaleI18n.get(s);
+    }
+
+    public String getName() {
+        return "item." + this.name;
+    }
+
+    public String f_(ItemStack itemstack) {
+        return "item." + this.name;
+    }
+
+    public Item b(Item item) {
+        this.craftingResult = item;
+        return this;
+    }
+
+    public boolean p() {
+        return true;
+    }
+
+    public Item q() {
+        return this.craftingResult;
+    }
+
+    public boolean r() {
+        return this.craftingResult != null;
+    }
+
+    public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {}
+
+    public void b(ItemStack itemstack, World world, EntityHuman entityhuman) {}
+
+    public boolean f() {
+        return false;
+    }
+
+    public EnumAnimation f(ItemStack itemstack) {
+        return EnumAnimation.NONE;
+    }
+
+    public int e(ItemStack itemstack) {
+        return 0;
+    }
+
+    public void a(ItemStack itemstack, World world, EntityLiving entityliving, int i) {}
+
+    public String a(ItemStack itemstack) {
+        return ("" + LocaleI18n.get(this.j(itemstack) + ".name")).trim();
+    }
+
+    public EnumItemRarity g(ItemStack itemstack) {
+        return itemstack.hasEnchantments() ? EnumItemRarity.RARE : EnumItemRarity.COMMON;
+    }
+
+    public boolean g_(ItemStack itemstack) {
+        return this.getMaxStackSize() == 1 && this.usesDurability();
+    }
+
+    protected MovingObjectPosition a(World world, EntityHuman entityhuman, boolean flag) {
+        float f = entityhuman.pitch;
+        float f1 = entityhuman.yaw;
+        double d0 = entityhuman.locX;
+        double d1 = entityhuman.locY + (double) entityhuman.getHeadHeight();
+        double d2 = entityhuman.locZ;
+        Vec3D vec3d = new Vec3D(d0, d1, d2);
+        float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
+        float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
+        float f4 = -MathHelper.cos(-f * 0.017453292F);
+        float f5 = MathHelper.sin(-f * 0.017453292F);
+        float f6 = f3 * f4;
+        float f7 = f2 * f4;
+        double d3 = 5.0D;
+        Vec3D vec3d1 = vec3d.add((double) f6 * d3, (double) f5 * d3, (double) f7 * d3);
+
+        return world.rayTrace(vec3d, vec3d1, flag, !flag, false);
+    }
+
+    public int c() {
+        return 0;
+    }
+
+    public Item a(CreativeModeTab creativemodetab) {
+        this.n = creativemodetab;
+        return this;
+    }
+
+    public boolean s() {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return false;
+    }
+
+    public Multimap<String, AttributeModifier> a(EnumItemSlot enumitemslot) {
+        return HashMultimap.create();
+    }
+
+    public static void t() {
+        a(Blocks.STONE, (Item) (new ItemMultiTexture(Blocks.STONE, Blocks.STONE, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockStone.EnumStoneVariant.a(itemstack.getData()).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("stone"));
+        a((Block) Blocks.GRASS, (Item) (new ItemWithAuxData(Blocks.GRASS, false)));
+        a(Blocks.DIRT, (Item) (new ItemMultiTexture(Blocks.DIRT, Blocks.DIRT, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockDirt.EnumDirtVariant.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("dirt"));
+        b(Blocks.COBBLESTONE);
+        a(Blocks.PLANKS, (Item) (new ItemMultiTexture(Blocks.PLANKS, Blocks.PLANKS, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("wood"));
+        a(Blocks.SAPLING, (Item) (new ItemMultiTexture(Blocks.SAPLING, Blocks.SAPLING, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("sapling"));
+        b(Blocks.BEDROCK);
+        a((Block) Blocks.SAND, (Item) (new ItemMultiTexture(Blocks.SAND, Blocks.SAND, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockSand.EnumSandVariant.a(itemstack.getData()).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("sand"));
+        b(Blocks.GRAVEL);
+        b(Blocks.GOLD_ORE);
+        b(Blocks.IRON_ORE);
+        b(Blocks.COAL_ORE);
+        a(Blocks.LOG, (Item) (new ItemMultiTexture(Blocks.LOG, Blocks.LOG, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("log"));
+        a(Blocks.LOG2, (Item) (new ItemMultiTexture(Blocks.LOG2, Blocks.LOG2, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData() + 4).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("log"));
+        a((Block) Blocks.LEAVES, (Item) (new ItemLeaves(Blocks.LEAVES)).b("leaves"));
+        a((Block) Blocks.LEAVES2, (Item) (new ItemLeaves(Blocks.LEAVES2)).b("leaves"));
+        a(Blocks.SPONGE, (Item) (new ItemMultiTexture(Blocks.SPONGE, Blocks.SPONGE, new Function() {
+            public String a(ItemStack itemstack) {
+                return (itemstack.getData() & 1) == 1 ? "wet" : "dry";
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("sponge"));
+        b(Blocks.GLASS);
+        b(Blocks.LAPIS_ORE);
+        b(Blocks.LAPIS_BLOCK);
+        b(Blocks.DISPENSER);
+        a(Blocks.SANDSTONE, (Item) (new ItemMultiTexture(Blocks.SANDSTONE, Blocks.SANDSTONE, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockSandStone.EnumSandstoneVariant.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("sandStone"));
+        b(Blocks.NOTEBLOCK);
+        b(Blocks.GOLDEN_RAIL);
+        b(Blocks.DETECTOR_RAIL);
+        a((Block) Blocks.STICKY_PISTON, (Item) (new ItemPiston(Blocks.STICKY_PISTON)));
+        b(Blocks.WEB);
+        a((Block) Blocks.TALLGRASS, (Item) (new ItemWithAuxData(Blocks.TALLGRASS, true)).a(new String[] { "shrub", "grass", "fern"}));
+        b((Block) Blocks.DEADBUSH);
+        a((Block) Blocks.PISTON, (Item) (new ItemPiston(Blocks.PISTON)));
+        a(Blocks.WOOL, (Item) (new ItemCloth(Blocks.WOOL)).b("cloth"));
+        a((Block) Blocks.YELLOW_FLOWER, (Item) (new ItemMultiTexture(Blocks.YELLOW_FLOWER, Blocks.YELLOW_FLOWER, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.YELLOW, itemstack.getData()).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("flower"));
+        a((Block) Blocks.RED_FLOWER, (Item) (new ItemMultiTexture(Blocks.RED_FLOWER, Blocks.RED_FLOWER, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.RED, itemstack.getData()).d();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("rose"));
+        b((Block) Blocks.BROWN_MUSHROOM);
+        b((Block) Blocks.RED_MUSHROOM);
+        b(Blocks.GOLD_BLOCK);
+        b(Blocks.IRON_BLOCK);
+        a((Block) Blocks.STONE_SLAB, (Item) (new ItemStep(Blocks.STONE_SLAB, Blocks.STONE_SLAB, Blocks.DOUBLE_STONE_SLAB)).b("stoneSlab"));
+        b(Blocks.BRICK_BLOCK);
+        b(Blocks.TNT);
+        b(Blocks.BOOKSHELF);
+        b(Blocks.MOSSY_COBBLESTONE);
+        b(Blocks.OBSIDIAN);
+        b(Blocks.TORCH);
+        b(Blocks.END_ROD);
+        b(Blocks.CHORUS_PLANT);
+        b(Blocks.CHORUS_FLOWER);
+        b(Blocks.PURPUR_BLOCK);
+        b(Blocks.PURPUR_PILLAR);
+        b(Blocks.PURPUR_STAIRS);
+        a((Block) Blocks.PURPUR_SLAB, (Item) (new ItemStep(Blocks.PURPUR_SLAB, Blocks.PURPUR_SLAB, Blocks.PURPUR_DOUBLE_SLAB)).b("purpurSlab"));
+        b(Blocks.MOB_SPAWNER);
+        b(Blocks.OAK_STAIRS);
+        b((Block) Blocks.CHEST);
+        b(Blocks.DIAMOND_ORE);
+        b(Blocks.DIAMOND_BLOCK);
+        b(Blocks.CRAFTING_TABLE);
+        b(Blocks.FARMLAND);
+        b(Blocks.FURNACE);
+        b(Blocks.LADDER);
+        b(Blocks.RAIL);
+        b(Blocks.STONE_STAIRS);
+        b(Blocks.LEVER);
+        b(Blocks.STONE_PRESSURE_PLATE);
+        b(Blocks.WOODEN_PRESSURE_PLATE);
+        b(Blocks.REDSTONE_ORE);
+        b(Blocks.REDSTONE_TORCH);
+        b(Blocks.STONE_BUTTON);
+        a(Blocks.SNOW_LAYER, (Item) (new ItemSnow(Blocks.SNOW_LAYER)));
+        b(Blocks.ICE);
+        b(Blocks.SNOW);
+        b((Block) Blocks.CACTUS);
+        b(Blocks.CLAY);
+        b(Blocks.JUKEBOX);
+        b(Blocks.FENCE);
+        b(Blocks.SPRUCE_FENCE);
+        b(Blocks.BIRCH_FENCE);
+        b(Blocks.JUNGLE_FENCE);
+        b(Blocks.DARK_OAK_FENCE);
+        b(Blocks.ACACIA_FENCE);
+        b(Blocks.PUMPKIN);
+        b(Blocks.NETHERRACK);
+        b(Blocks.SOUL_SAND);
+        b(Blocks.GLOWSTONE);
+        b(Blocks.LIT_PUMPKIN);
+        b(Blocks.TRAPDOOR);
+        a(Blocks.MONSTER_EGG, (Item) (new ItemMultiTexture(Blocks.MONSTER_EGG, Blocks.MONSTER_EGG, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockMonsterEggs.EnumMonsterEggVarient.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("monsterStoneEgg"));
+        a(Blocks.STONEBRICK, (Item) (new ItemMultiTexture(Blocks.STONEBRICK, Blocks.STONEBRICK, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockSmoothBrick.EnumStonebrickType.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("stonebricksmooth"));
+        b(Blocks.BROWN_MUSHROOM_BLOCK);
+        b(Blocks.RED_MUSHROOM_BLOCK);
+        b(Blocks.IRON_BARS);
+        b(Blocks.GLASS_PANE);
+        b(Blocks.MELON_BLOCK);
+        a(Blocks.VINE, (Item) (new ItemWithAuxData(Blocks.VINE, false)));
+        b(Blocks.FENCE_GATE);
+        b(Blocks.SPRUCE_FENCE_GATE);
+        b(Blocks.BIRCH_FENCE_GATE);
+        b(Blocks.JUNGLE_FENCE_GATE);
+        b(Blocks.DARK_OAK_FENCE_GATE);
+        b(Blocks.ACACIA_FENCE_GATE);
+        b(Blocks.BRICK_STAIRS);
+        b(Blocks.STONE_BRICK_STAIRS);
+        b((Block) Blocks.MYCELIUM);
+        a(Blocks.WATERLILY, (Item) (new ItemWaterLily(Blocks.WATERLILY)));
+        b(Blocks.NETHER_BRICK);
+        b(Blocks.NETHER_BRICK_FENCE);
+        b(Blocks.NETHER_BRICK_STAIRS);
+        b(Blocks.ENCHANTING_TABLE);
+        b(Blocks.END_PORTAL_FRAME);
+        b(Blocks.END_STONE);
+        b(Blocks.END_BRICKS);
+        b(Blocks.DRAGON_EGG);
+        b(Blocks.REDSTONE_LAMP);
+        a((Block) Blocks.WOODEN_SLAB, (Item) (new ItemStep(Blocks.WOODEN_SLAB, Blocks.WOODEN_SLAB, Blocks.DOUBLE_WOODEN_SLAB)).b("woodSlab"));
+        b(Blocks.SANDSTONE_STAIRS);
+        b(Blocks.EMERALD_ORE);
+        b(Blocks.ENDER_CHEST);
+        b((Block) Blocks.TRIPWIRE_HOOK);
+        b(Blocks.EMERALD_BLOCK);
+        b(Blocks.SPRUCE_STAIRS);
+        b(Blocks.BIRCH_STAIRS);
+        b(Blocks.JUNGLE_STAIRS);
+        b(Blocks.COMMAND_BLOCK);
+        b((Block) Blocks.BEACON);
+        a(Blocks.COBBLESTONE_WALL, (Item) (new ItemMultiTexture(Blocks.COBBLESTONE_WALL, Blocks.COBBLESTONE_WALL, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockCobbleWall.EnumCobbleVariant.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("cobbleWall"));
+        b(Blocks.WOODEN_BUTTON);
+        a(Blocks.ANVIL, (Item) (new ItemAnvil(Blocks.ANVIL)).b("anvil"));
+        b(Blocks.TRAPPED_CHEST);
+        b(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE);
+        b(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE);
+        b((Block) Blocks.DAYLIGHT_DETECTOR);
+        b(Blocks.REDSTONE_BLOCK);
+        b(Blocks.QUARTZ_ORE);
+        b((Block) Blocks.HOPPER);
+        a(Blocks.QUARTZ_BLOCK, (Item) (new ItemMultiTexture(Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK, new String[] { "default", "chiseled", "lines"})).b("quartzBlock"));
+        b(Blocks.QUARTZ_STAIRS);
+        b(Blocks.ACTIVATOR_RAIL);
+        b(Blocks.DROPPER);
+        a(Blocks.STAINED_HARDENED_CLAY, (Item) (new ItemCloth(Blocks.STAINED_HARDENED_CLAY)).b("clayHardenedStained"));
+        b(Blocks.BARRIER);
+        b(Blocks.IRON_TRAPDOOR);
+        b(Blocks.HAY_BLOCK);
+        a(Blocks.CARPET, (Item) (new ItemCloth(Blocks.CARPET)).b("woolCarpet"));
+        b(Blocks.HARDENED_CLAY);
+        b(Blocks.COAL_BLOCK);
+        b(Blocks.PACKED_ICE);
+        b(Blocks.ACACIA_STAIRS);
+        b(Blocks.DARK_OAK_STAIRS);
+        b(Blocks.SLIME);
+        b(Blocks.GRASS_PATH);
+        a((Block) Blocks.DOUBLE_PLANT, (Item) (new ItemMultiTexture(Blocks.DOUBLE_PLANT, Blocks.DOUBLE_PLANT, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockTallPlant.EnumTallFlowerVariants.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("doublePlant"));
+        a((Block) Blocks.STAINED_GLASS, (Item) (new ItemCloth(Blocks.STAINED_GLASS)).b("stainedGlass"));
+        a((Block) Blocks.STAINED_GLASS_PANE, (Item) (new ItemCloth(Blocks.STAINED_GLASS_PANE)).b("stainedGlassPane"));
+        a(Blocks.PRISMARINE, (Item) (new ItemMultiTexture(Blocks.PRISMARINE, Blocks.PRISMARINE, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockPrismarine.EnumPrismarineVariant.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("prismarine"));
+        b(Blocks.SEA_LANTERN);
+        a(Blocks.RED_SANDSTONE, (Item) (new ItemMultiTexture(Blocks.RED_SANDSTONE, Blocks.RED_SANDSTONE, new Function() {
+            public String a(ItemStack itemstack) {
+                return BlockRedSandstone.EnumRedSandstoneVariant.a(itemstack.getData()).c();
+            }
+
+            public Object apply(Object object) {
+                return this.a((ItemStack) object);
+            }
+        })).b("redSandStone"));
+        b(Blocks.RED_SANDSTONE_STAIRS);
+        a((Block) Blocks.STONE_SLAB2, (Item) (new ItemStep(Blocks.STONE_SLAB2, Blocks.STONE_SLAB2, Blocks.DOUBLE_STONE_SLAB2)).b("stoneSlab2"));
+        b(Blocks.dc);
+        b(Blocks.dd);
+        a(256, "iron_shovel", (new ItemSpade(Item.EnumToolMaterial.IRON)).c("shovelIron"));
+        a(257, "iron_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.IRON)).c("pickaxeIron"));
+        a(258, "iron_axe", (new ItemAxe(Item.EnumToolMaterial.IRON)).c("hatchetIron"));
+        a(259, "flint_and_steel", (new ItemFlintAndSteel()).c("flintAndSteel"));
+        a(260, "apple", (new ItemFood(4, 0.3F, false)).c("apple"));
+        a(261, "bow", (new ItemBow()).c("bow"));
+        a(262, "arrow", (new ItemArrow()).c("arrow"));
+        a(263, "coal", (new ItemCoal()).c("coal"));
+        a(264, "diamond", (new Item()).c("diamond").a(CreativeModeTab.l));
+        a(265, "iron_ingot", (new Item()).c("ingotIron").a(CreativeModeTab.l));
+        a(266, "gold_ingot", (new Item()).c("ingotGold").a(CreativeModeTab.l));
+        a(267, "iron_sword", (new ItemSword(Item.EnumToolMaterial.IRON)).c("swordIron"));
+        a(268, "wooden_sword", (new ItemSword(Item.EnumToolMaterial.WOOD)).c("swordWood"));
+        a(269, "wooden_shovel", (new ItemSpade(Item.EnumToolMaterial.WOOD)).c("shovelWood"));
+        a(270, "wooden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.WOOD)).c("pickaxeWood"));
+        a(271, "wooden_axe", (new ItemAxe(Item.EnumToolMaterial.WOOD)).c("hatchetWood"));
+        a(272, "stone_sword", (new ItemSword(Item.EnumToolMaterial.STONE)).c("swordStone"));
+        a(273, "stone_shovel", (new ItemSpade(Item.EnumToolMaterial.STONE)).c("shovelStone"));
+        a(274, "stone_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.STONE)).c("pickaxeStone"));
+        a(275, "stone_axe", (new ItemAxe(Item.EnumToolMaterial.STONE)).c("hatchetStone"));
+        a(276, "diamond_sword", (new ItemSword(Item.EnumToolMaterial.DIAMOND)).c("swordDiamond"));
+        a(277, "diamond_shovel", (new ItemSpade(Item.EnumToolMaterial.DIAMOND)).c("shovelDiamond"));
+        a(278, "diamond_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.DIAMOND)).c("pickaxeDiamond"));
+        a(279, "diamond_axe", (new ItemAxe(Item.EnumToolMaterial.DIAMOND)).c("hatchetDiamond"));
+        a(280, "stick", (new Item()).n().c("stick").a(CreativeModeTab.l));
+        a(281, "bowl", (new Item()).c("bowl").a(CreativeModeTab.l));
+        a(282, "mushroom_stew", (new ItemSoup(6)).c("mushroomStew"));
+        a(283, "golden_sword", (new ItemSword(Item.EnumToolMaterial.GOLD)).c("swordGold"));
+        a(284, "golden_shovel", (new ItemSpade(Item.EnumToolMaterial.GOLD)).c("shovelGold"));
+        a(285, "golden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.GOLD)).c("pickaxeGold"));
+        a(286, "golden_axe", (new ItemAxe(Item.EnumToolMaterial.GOLD)).c("hatchetGold"));
+        a(287, "string", (new ItemReed(Blocks.TRIPWIRE)).c("string").a(CreativeModeTab.l));
+        a(288, "feather", (new Item()).c("feather").a(CreativeModeTab.l));
+        a(289, "gunpowder", (new Item()).c("sulphur").a(CreativeModeTab.l));
+        a(290, "wooden_hoe", (new ItemHoe(Item.EnumToolMaterial.WOOD)).c("hoeWood"));
+        a(291, "stone_hoe", (new ItemHoe(Item.EnumToolMaterial.STONE)).c("hoeStone"));
+        a(292, "iron_hoe", (new ItemHoe(Item.EnumToolMaterial.IRON)).c("hoeIron"));
+        a(293, "diamond_hoe", (new ItemHoe(Item.EnumToolMaterial.DIAMOND)).c("hoeDiamond"));
+        a(294, "golden_hoe", (new ItemHoe(Item.EnumToolMaterial.GOLD)).c("hoeGold"));
+        a(295, "wheat_seeds", (new ItemSeeds(Blocks.WHEAT, Blocks.FARMLAND)).c("seeds"));
+        a(296, "wheat", (new Item()).c("wheat").a(CreativeModeTab.l));
+        a(297, "bread", (new ItemFood(5, 0.6F, false)).c("bread"));
+        a(298, "leather_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.HEAD)).c("helmetCloth"));
+        a(299, "leather_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.CHEST)).c("chestplateCloth"));
+        a(300, "leather_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.LEGS)).c("leggingsCloth"));
+        a(301, "leather_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.FEET)).c("bootsCloth"));
+        a(302, "chainmail_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.HEAD)).c("helmetChain"));
+        a(303, "chainmail_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.CHEST)).c("chestplateChain"));
+        a(304, "chainmail_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.LEGS)).c("leggingsChain"));
+        a(305, "chainmail_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.FEET)).c("bootsChain"));
+        a(306, "iron_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.HEAD)).c("helmetIron"));
+        a(307, "iron_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.CHEST)).c("chestplateIron"));
+        a(308, "iron_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.LEGS)).c("leggingsIron"));
+        a(309, "iron_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.FEET)).c("bootsIron"));
+        a(310, "diamond_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.HEAD)).c("helmetDiamond"));
+        a(311, "diamond_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.CHEST)).c("chestplateDiamond"));
+        a(312, "diamond_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.LEGS)).c("leggingsDiamond"));
+        a(313, "diamond_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.FEET)).c("bootsDiamond"));
+        a(314, "golden_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.HEAD)).c("helmetGold"));
+        a(315, "golden_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.CHEST)).c("chestplateGold"));
+        a(316, "golden_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.LEGS)).c("leggingsGold"));
+        a(317, "golden_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.FEET)).c("bootsGold"));
+        a(318, "flint", (new Item()).c("flint").a(CreativeModeTab.l));
+        a(319, "porkchop", (new ItemFood(3, 0.3F, true)).c("porkchopRaw"));
+        a(320, "cooked_porkchop", (new ItemFood(8, 0.8F, true)).c("porkchopCooked"));
+        a(321, "painting", (new ItemHanging(EntityPainting.class)).c("painting"));
+        a(322, "golden_apple", (new ItemGoldenApple(4, 1.2F, false)).h().c("appleGold"));
+        a(323, "sign", (new ItemSign()).c("sign"));
+        a(324, "wooden_door", (new ItemDoor(Blocks.WOODEN_DOOR)).c("doorOak"));
+        Item item = (new ItemBucket(Blocks.AIR)).c("bucket").d(16);
+
+        a(325, "bucket", item);
+        a(326, "water_bucket", (new ItemBucket(Blocks.FLOWING_WATER)).c("bucketWater").b(item));
+        a(327, "lava_bucket", (new ItemBucket(Blocks.FLOWING_LAVA)).c("bucketLava").b(item));
+        a(328, "minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.RIDEABLE)).c("minecart"));
+        a(329, "saddle", (new ItemSaddle()).c("saddle"));
+        a(330, "iron_door", (new ItemDoor(Blocks.IRON_DOOR)).c("doorIron"));
+        a(331, "redstone", (new ItemRedstone()).c("redstone"));
+        a(332, "snowball", (new ItemSnowball()).c("snowball"));
+        a(333, "boat", new ItemBoat(EntityBoat.EnumBoatType.OAK));
+        a(334, "leather", (new Item()).c("leather").a(CreativeModeTab.l));
+        a(335, "milk_bucket", (new ItemMilkBucket()).c("milk").b(item));
+        a(336, "brick", (new Item()).c("brick").a(CreativeModeTab.l));
+        a(337, "clay_ball", (new Item()).c("clay").a(CreativeModeTab.l));
+        a(338, "reeds", (new ItemReed(Blocks.REEDS)).c("reeds").a(CreativeModeTab.l));
+        a(339, "paper", (new Item()).c("paper").a(CreativeModeTab.f));
+        a(340, "book", (new ItemBook()).c("book").a(CreativeModeTab.f));
+        a(341, "slime_ball", (new Item()).c("slimeball").a(CreativeModeTab.f));
+        a(342, "chest_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.CHEST)).c("minecartChest"));
+        a(343, "furnace_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.FURNACE)).c("minecartFurnace"));
+        a(344, "egg", (new ItemEgg()).c("egg"));
+        a(345, "compass", (new ItemCompass()).c("compass").a(CreativeModeTab.i));
+        a(346, "fishing_rod", (new ItemFishingRod()).c("fishingRod"));
+        a(347, "clock", (new ItemClock()).c("clock").a(CreativeModeTab.i));
+        a(348, "glowstone_dust", (new Item()).c("yellowDust").a(CreativeModeTab.l));
+        a(349, "fish", (new ItemFish(false)).c("fish").a(true));
+        a(350, "cooked_fish", (new ItemFish(true)).c("fish").a(true));
+        a(351, "dye", (new ItemDye()).c("dyePowder"));
+        a(352, "bone", (new Item()).c("bone").n().a(CreativeModeTab.f));
+        a(353, "sugar", (new Item()).c("sugar").a(CreativeModeTab.l));
+        a(354, "cake", (new ItemReed(Blocks.CAKE)).d(1).c("cake").a(CreativeModeTab.h));
+        a(355, "bed", (new ItemBed()).d(1).c("bed"));
+        a(356, "repeater", (new ItemReed(Blocks.UNPOWERED_REPEATER)).c("diode").a(CreativeModeTab.d));
+        a(357, "cookie", (new ItemFood(2, 0.1F, false)).c("cookie"));
+        a(358, "filled_map", (new ItemWorldMap()).c("map"));
+        a(359, "shears", (new ItemShears()).c("shears"));
+        a(360, "melon", (new ItemFood(2, 0.3F, false)).c("melon"));
+        a(361, "pumpkin_seeds", (new ItemSeeds(Blocks.PUMPKIN_STEM, Blocks.FARMLAND)).c("seeds_pumpkin"));
+        a(362, "melon_seeds", (new ItemSeeds(Blocks.MELON_STEM, Blocks.FARMLAND)).c("seeds_melon"));
+        a(363, "beef", (new ItemFood(3, 0.3F, true)).c("beefRaw"));
+        a(364, "cooked_beef", (new ItemFood(8, 0.8F, true)).c("beefCooked"));
+        a(365, "chicken", (new ItemFood(2, 0.3F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.3F).c("chickenRaw"));
+        a(366, "cooked_chicken", (new ItemFood(6, 0.6F, true)).c("chickenCooked"));
+        a(367, "rotten_flesh", (new ItemFood(4, 0.1F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.8F).c("rottenFlesh"));
+        a(368, "ender_pearl", (new ItemEnderPearl()).c("enderPearl"));
+        a(369, "blaze_rod", (new Item()).c("blazeRod").a(CreativeModeTab.l).n());
+        a(370, "ghast_tear", (new Item()).c("ghastTear").a(CreativeModeTab.k));
+        a(371, "gold_nugget", (new Item()).c("goldNugget").a(CreativeModeTab.l));
+        a(372, "nether_wart", (new ItemSeeds(Blocks.NETHER_WART, Blocks.SOUL_SAND)).c("netherStalkSeeds"));
+        a(373, "potion", (new ItemPotion()).c("potion"));
+        Item item1 = (new ItemGlassBottle()).c("glassBottle");
+
+        a(374, "glass_bottle", item1);
+        a(375, "spider_eye", (new ItemFood(2, 0.8F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 1.0F).c("spiderEye"));
+        a(376, "fermented_spider_eye", (new Item()).c("fermentedSpiderEye").a(CreativeModeTab.k));
+        a(377, "blaze_powder", (new Item()).c("blazePowder").a(CreativeModeTab.k));
+        a(378, "magma_cream", (new Item()).c("magmaCream").a(CreativeModeTab.k));
+        a(379, "brewing_stand", (new ItemReed(Blocks.BREWING_STAND)).c("brewingStand").a(CreativeModeTab.k));
+        a(380, "cauldron", (new ItemReed(Blocks.cauldron)).c("cauldron").a(CreativeModeTab.k));
+        a(381, "ender_eye", (new ItemEnderEye()).c("eyeOfEnder"));
+        a(382, "speckled_melon", (new Item()).c("speckledMelon").a(CreativeModeTab.k));
+        a(383, "spawn_egg", (new ItemMonsterEgg()).c("monsterPlacer"));
+        a(384, "experience_bottle", (new ItemExpBottle()).c("expBottle"));
+        a(385, "fire_charge", (new ItemFireball()).c("fireball"));
+        a(386, "writable_book", (new ItemBookAndQuill()).c("writingBook").a(CreativeModeTab.f));
+        a(387, "written_book", (new ItemWrittenBook()).c("writtenBook").d(16));
+        a(388, "emerald", (new Item()).c("emerald").a(CreativeModeTab.l));
+        a(389, "item_frame", (new ItemHanging(EntityItemFrame.class)).c("frame"));
+        a(390, "flower_pot", (new ItemReed(Blocks.FLOWER_POT)).c("flowerPot").a(CreativeModeTab.c));
+        a(391, "carrot", (new ItemSeedFood(3, 0.6F, Blocks.CARROTS, Blocks.FARMLAND)).c("carrots"));
+        a(392, "potato", (new ItemSeedFood(1, 0.3F, Blocks.POTATOES, Blocks.FARMLAND)).c("potato"));
+        a(393, "baked_potato", (new ItemFood(5, 0.6F, false)).c("potatoBaked"));
+        a(394, "poisonous_potato", (new ItemFood(2, 0.3F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 0.6F).c("potatoPoisonous"));
+        a(395, "map", (new ItemMapEmpty()).c("emptyMap"));
+        a(396, "golden_carrot", (new ItemFood(6, 1.2F, false)).c("carrotGolden").a(CreativeModeTab.k));
+        a(397, "skull", (new ItemSkull()).c("skull"));
+        a(398, "carrot_on_a_stick", (new ItemCarrotStick()).c("carrotOnAStick"));
+        a(399, "nether_star", (new ItemNetherStar()).c("netherStar").a(CreativeModeTab.l));
+        a(400, "pumpkin_pie", (new ItemFood(8, 0.3F, false)).c("pumpkinPie").a(CreativeModeTab.h));
+        a(401, "fireworks", (new ItemFireworks()).c("fireworks"));
+        a(402, "firework_charge", (new ItemFireworksCharge()).c("fireworksCharge").a(CreativeModeTab.f));
+        a(403, "enchanted_book", (new ItemEnchantedBook()).d(1).c("enchantedBook"));
+        a(404, "comparator", (new ItemReed(Blocks.UNPOWERED_COMPARATOR)).c("comparator").a(CreativeModeTab.d));
+        a(405, "netherbrick", (new Item()).c("netherbrick").a(CreativeModeTab.l));
+        a(406, "quartz", (new Item()).c("netherquartz").a(CreativeModeTab.l));
+        a(407, "tnt_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.TNT)).c("minecartTnt"));
+        a(408, "hopper_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.HOPPER)).c("minecartHopper"));
+        a(409, "prismarine_shard", (new Item()).c("prismarineShard").a(CreativeModeTab.l));
+        a(410, "prismarine_crystals", (new Item()).c("prismarineCrystals").a(CreativeModeTab.l));
+        a(411, "rabbit", (new ItemFood(3, 0.3F, true)).c("rabbitRaw"));
+        a(412, "cooked_rabbit", (new ItemFood(5, 0.6F, true)).c("rabbitCooked"));
+        a(413, "rabbit_stew", (new ItemSoup(10)).c("rabbitStew"));
+        a(414, "rabbit_foot", (new Item()).c("rabbitFoot").a(CreativeModeTab.k));
+        a(415, "rabbit_hide", (new Item()).c("rabbitHide").a(CreativeModeTab.l));
+        a(416, "armor_stand", (new ItemArmorStand()).c("armorStand").d(16));
+        a(417, "iron_horse_armor", (new Item()).c("horsearmormetal").d(1).a(CreativeModeTab.f));
+        a(418, "golden_horse_armor", (new Item()).c("horsearmorgold").d(1).a(CreativeModeTab.f));
+        a(419, "diamond_horse_armor", (new Item()).c("horsearmordiamond").d(1).a(CreativeModeTab.f));
+        a(420, "lead", (new ItemLeash()).c("leash"));
+        a(421, "name_tag", (new ItemNameTag()).c("nameTag"));
+        a(422, "command_block_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.COMMAND_BLOCK)).c("minecartCommandBlock").a((CreativeModeTab) null));
+        a(423, "mutton", (new ItemFood(2, 0.3F, true)).c("muttonRaw"));
+        a(424, "cooked_mutton", (new ItemFood(6, 0.8F, true)).c("muttonCooked"));
+        a(425, "banner", (new ItemBanner()).b("banner"));
+        a(426, "end_crystal", new ItemEndCrystal());
+        a(427, "spruce_door", (new ItemDoor(Blocks.SPRUCE_DOOR)).c("doorSpruce"));
+        a(428, "birch_door", (new ItemDoor(Blocks.BIRCH_DOOR)).c("doorBirch"));
+        a(429, "jungle_door", (new ItemDoor(Blocks.JUNGLE_DOOR)).c("doorJungle"));
+        a(430, "acacia_door", (new ItemDoor(Blocks.ACACIA_DOOR)).c("doorAcacia"));
+        a(431, "dark_oak_door", (new ItemDoor(Blocks.DARK_OAK_DOOR)).c("doorDarkOak"));
+        a(432, "chorus_fruit", (new ItemChorusFruit(4, 0.3F)).h().c("chorusFruit").a(CreativeModeTab.l));
+        a(433, "chorus_fruit_popped", (new Item()).c("chorusFruitPopped").a(CreativeModeTab.l));
+        a(434, "beetroot", (new ItemFood(1, 0.6F, false)).c("beetroot"));
+        a(435, "beetroot_seeds", (new ItemSeeds(Blocks.BEETROOT, Blocks.FARMLAND)).c("beetroot_seeds"));
+        a(436, "beetroot_soup", (new ItemSoup(6)).c("beetroot_soup"));
+        a(437, "dragon_breath", (new Item()).a(CreativeModeTab.k).c("dragon_breath").b(item1));
+        a(438, "splash_potion", (new ItemSplashPotion()).c("splash_potion"));
+        a(439, "spectral_arrow", (new ItemSpectralArrow()).c("spectral_arrow"));
+        a(440, "tipped_arrow", (new ItemTippedArrow()).c("tipped_arrow"));
+        a(441, "lingering_potion", (new ItemLingeringPotion()).c("lingering_potion"));
+        a(442, "shield", (new ItemShield()).c("shield"));
+        a(443, "elytra", (new ItemElytra()).c("elytra"));
+        a(444, "spruce_boat", new ItemBoat(EntityBoat.EnumBoatType.SPRUCE));
+        a(445, "birch_boat", new ItemBoat(EntityBoat.EnumBoatType.BIRCH));
+        a(446, "jungle_boat", new ItemBoat(EntityBoat.EnumBoatType.JUNGLE));
+        a(447, "acacia_boat", new ItemBoat(EntityBoat.EnumBoatType.ACACIA));
+        a(448, "dark_oak_boat", new ItemBoat(EntityBoat.EnumBoatType.DARK_OAK));
+        a(2256, "record_13", (new ItemRecord("13", SoundEffects.eu)).c("record"));
+        a(2257, "record_cat", (new ItemRecord("cat", SoundEffects.ew)).c("record"));
+        a(2258, "record_blocks", (new ItemRecord("blocks", SoundEffects.ev)).c("record"));
+        a(2259, "record_chirp", (new ItemRecord("chirp", SoundEffects.ex)).c("record"));
+        a(2260, "record_far", (new ItemRecord("far", SoundEffects.ey)).c("record"));
+        a(2261, "record_mall", (new ItemRecord("mall", SoundEffects.ez)).c("record"));
+        a(2262, "record_mellohi", (new ItemRecord("mellohi", SoundEffects.eA)).c("record"));
+        a(2263, "record_stal", (new ItemRecord("stal", SoundEffects.eB)).c("record"));
+        a(2264, "record_strad", (new ItemRecord("strad", SoundEffects.eC)).c("record"));
+        a(2265, "record_ward", (new ItemRecord("ward", SoundEffects.eE)).c("record"));
+        a(2266, "record_11", (new ItemRecord("11", SoundEffects.et)).c("record"));
+        a(2267, "record_wait", (new ItemRecord("wait", SoundEffects.eD)).c("record"));
+    }
+
+    private static void b(Block block) {
+        a(block, (Item) (new ItemBlock(block)));
+    }
+
+    protected static void a(Block block, Item item) {
+        a(Block.getId(block), (MinecraftKey) Block.REGISTRY.b(block), item);
+        Item.a.put(block, item);
+    }
+
+    private static void a(int i, String s, Item item) {
+        a(i, new MinecraftKey(s), item);
+    }
+
+    private static void a(int i, MinecraftKey minecraftkey, Item item) {
+        Item.REGISTRY.a(i, minecraftkey, item);
+    }
+
+    public static enum EnumToolMaterial {
+
+        WOOD(0, 59, 2.0F, 0.0F, 15), STONE(1, 131, 4.0F, 1.0F, 5), IRON(2, 250, 6.0F, 2.0F, 14), DIAMOND(3, 1561, 8.0F, 3.0F, 10), GOLD(0, 32, 12.0F, 0.0F, 22);
+
+        private final int f;
+        private final int g;
+        private final float h;
+        private final float i;
+        private final int j;
+
+        private EnumToolMaterial(int i, int j, float f, float f1, int k) {
+            this.f = i;
+            this.g = j;
+            this.h = f;
+            this.i = f1;
+            this.j = k;
+        }
+
+        public int a() {
+            return this.g;
+        }
+
+        public float b() {
+            return this.h;
+        }
+
+        public float c() {
+            return this.i;
+        }
+
+        public int d() {
+            return this.f;
+        }
+
+        public int e() {
+            return this.j;
+        }
+
+        public Item f() {
+            return this == Item.EnumToolMaterial.WOOD ? Item.getItemOf(Blocks.PLANKS) : (this == Item.EnumToolMaterial.STONE ? Item.getItemOf(Blocks.COBBLESTONE) : (this == Item.EnumToolMaterial.GOLD ? Items.GOLD_INGOT : (this == Item.EnumToolMaterial.IRON ? Items.IRON_INGOT : (this == Item.EnumToolMaterial.DIAMOND ? Items.DIAMOND : null))));
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
new file mode 100644
index 0000000..40338ae
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -0,0 +1,123 @@
+package net.minecraft.server;
+
+import com.mojang.authlib.GameProfile;
+import java.util.UUID;
+
+public class ItemSkull extends Item {
+
+    private static final String[] a = new String[] { "skeleton", "wither", "zombie", "char", "creeper", "dragon"};
+
+    public ItemSkull() {
+        this.a(CreativeModeTab.c);
+        this.setMaxDurability(0);
+        this.a(true);
+    }
+
+    public EnumInteractionResult a(ItemStack itemstack, EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+        if (enumdirection == EnumDirection.DOWN) {
+            return EnumInteractionResult.FAIL;
+        } else {
+            IBlockData iblockdata = world.getType(blockposition);
+            Block block = iblockdata.getBlock();
+            boolean flag = block.a((IBlockAccess) world, blockposition);
+
+            if (!flag) {
+                if (!world.getType(blockposition).getMaterial().isBuildable()) {
+                    return EnumInteractionResult.FAIL;
+                }
+
+                blockposition = blockposition.shift(enumdirection);
+            }
+
+            if (entityhuman.a(blockposition, enumdirection, itemstack) && Blocks.SKULL.canPlace(world, blockposition)) {
+                if (world.isClientSide) {
+                    return EnumInteractionResult.SUCCESS;
+                } else {
+                    world.setTypeAndData(blockposition, Blocks.SKULL.getBlockData().set(BlockSkull.FACING, enumdirection), 11);
+                    int i = 0;
+
+                    if (enumdirection == EnumDirection.UP) {
+                        i = MathHelper.floor((double) (entityhuman.yaw * 16.0F / 360.0F) + 0.5D) & 15;
+                    }
+
+                    TileEntity tileentity = world.getTileEntity(blockposition);
+
+                    if (tileentity instanceof TileEntitySkull) {
+                        TileEntitySkull tileentityskull = (TileEntitySkull) tileentity;
+
+                        if (itemstack.getData() == 3) {
+                            GameProfile gameprofile = null;
+
+                            if (itemstack.hasTag()) {
+                                NBTTagCompound nbttagcompound = itemstack.getTag();
+
+                                if (nbttagcompound.hasKeyOfType("SkullOwner", 10)) {
+                                    gameprofile = GameProfileSerializer.deserialize(nbttagcompound.getCompound("SkullOwner"));
+                                } else if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && !nbttagcompound.getString("SkullOwner").isEmpty()) {
+                                    gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+                                }
+                            }
+
+                            tileentityskull.setGameProfile(gameprofile);
+                        } else {
+                            tileentityskull.setSkullType(itemstack.getData());
+                        }
+
+                        tileentityskull.setRotation(i);
+                        Blocks.SKULL.a(world, blockposition, tileentityskull);
+                    }
+
+                    --itemstack.count;
+                    return EnumInteractionResult.SUCCESS;
+                }
+            } else {
+                return EnumInteractionResult.FAIL;
+            }
+        }
+    }
+
+    public int filterData(int i) {
+        return i;
+    }
+
+    public String f_(ItemStack itemstack) {
+        int i = itemstack.getData();
+
+        if (i < 0 || i >= ItemSkull.a.length) {
+            i = 0;
+        }
+
+        return super.getName() + "." + ItemSkull.a[i];
+    }
+
+    public String a(ItemStack itemstack) {
+        if (itemstack.getData() == 3 && itemstack.hasTag()) {
+            if (itemstack.getTag().hasKeyOfType("SkullOwner", 8)) {
+                return LocaleI18n.a("item.skull.player.name", new Object[] { itemstack.getTag().getString("SkullOwner")});
+            }
+
+            if (itemstack.getTag().hasKeyOfType("SkullOwner", 10)) {
+                NBTTagCompound nbttagcompound = itemstack.getTag().getCompound("SkullOwner");
+
+                if (nbttagcompound.hasKeyOfType("Name", 8)) {
+                    return LocaleI18n.a("item.skull.player.name", new Object[] { nbttagcompound.getString("Name")});
+                }
+            }
+        }
+
+        return super.a(itemstack);
+    }
+
+    public boolean a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && !nbttagcompound.getString("SkullOwner").isEmpty()) {
+            GameProfile gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
+
+            gameprofile = TileEntitySkull.b(gameprofile);
+            nbttagcompound.set("SkullOwner", GameProfileSerializer.serialize(new NBTTagCompound(), gameprofile));
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/OpList.java b/src/main/java/net/minecraft/server/OpList.java
new file mode 100644
index 0000000..e5f457b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/OpList.java
@@ -0,0 +1,66 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class OpList extends JsonList<GameProfile, OpListEntry> {
+
+    public OpList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry<GameProfile> a(JsonObject jsonobject) {
+        return new OpListEntry(jsonobject);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        OpListEntry oplistentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) oplistentry.getKey()).getName()) {
+            oplistentry = (OpListEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    public int a(GameProfile gameprofile) {
+        OpListEntry oplistentry = (OpListEntry) this.get(gameprofile);
+
+        return oplistentry != null ? oplistentry.a() : 0;
+    }
+
+    public boolean b(GameProfile gameprofile) {
+        OpListEntry oplistentry = (OpListEntry) this.get(gameprofile);
+
+        return oplistentry != null ? oplistentry.b() : false;
+    }
+
+    protected String c(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        OpListEntry oplistentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            oplistentry = (OpListEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) oplistentry.getKey()).getName()));
+
+        return (GameProfile) oplistentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.c((GameProfile) object);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
new file mode 100644
index 0000000..3f90081
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -0,0 +1,48 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToByteEncoder;
+import java.io.IOException;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
+public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
+
+    private static final Logger a = LogManager.getLogger();
+    private static final Marker b = MarkerManager.getMarker("PACKET_SENT", NetworkManager.b);
+    private final EnumProtocolDirection c;
+
+    public PacketEncoder(EnumProtocolDirection enumprotocoldirection) {
+        this.c = enumprotocoldirection;
+    }
+
+    protected void a(ChannelHandlerContext channelhandlercontext, Packet<?> packet, ByteBuf bytebuf) throws Exception {
+        Integer integer = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, packet);
+
+        if (PacketEncoder.a.isDebugEnabled()) {
+            PacketEncoder.a.debug(PacketEncoder.b, "OUT: [{}:{}] {}", new Object[] { channelhandlercontext.channel().attr(NetworkManager.c).get(), integer, packet.getClass().getName()});
+        }
+
+        if (integer == null) {
+            throw new IOException("Can\'t serialize unregistered packet");
+        } else {
+            PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+
+            packetdataserializer.b(integer.intValue());
+
+            try {
+                packet.b(packetdataserializer);
+            } catch (Throwable throwable) {
+                PacketEncoder.a.error(throwable);
+            }
+
+        }
+    }
+
+    protected void encode(ChannelHandlerContext channelhandlercontext, Object object, ByteBuf bytebuf) throws Exception {
+        this.a(channelhandlercontext, (Packet) object, bytebuf);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
new file mode 100644
index 0000000..86f1be7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
@@ -0,0 +1,39 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketHandshakingInSetProtocol implements Packet<PacketHandshakingInListener> {
+
+    private int a;
+    public String hostname;
+    public int port;
+    private EnumProtocol d;
+
+    public PacketHandshakingInSetProtocol() {}
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.hostname = packetdataserializer.c(255);
+        this.port = packetdataserializer.readUnsignedShort();
+        this.d = EnumProtocol.a(packetdataserializer.g());
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.a(this.hostname);
+        packetdataserializer.writeShort(this.port);
+        packetdataserializer.b(this.d.a());
+    }
+
+    public void a(PacketHandshakingInListener packethandshakinginlistener) {
+        packethandshakinginlistener.a(this);
+    }
+
+    public EnumProtocol a() {
+        return this.d;
+    }
+
+    public int b() {
+        return this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
new file mode 100644
index 0000000..30ca225
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
@@ -0,0 +1,32 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayInResourcePackStatus implements Packet<PacketListenerPlayIn> {
+
+    private String a;
+    public PacketPlayInResourcePackStatus.EnumResourcePackStatus status;
+
+    public PacketPlayInResourcePackStatus() {}
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.c(40);
+        this.status = (PacketPlayInResourcePackStatus.EnumResourcePackStatus) packetdataserializer.a(PacketPlayInResourcePackStatus.EnumResourcePackStatus.class);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.a((Enum) this.status);
+    }
+
+    public void a(PacketListenerPlayIn packetlistenerplayin) {
+        packetlistenerplayin.a(this);
+    }
+
+    public static enum EnumResourcePackStatus {
+
+        SUCCESSFULLY_LOADED, DECLINED, FAILED_DOWNLOAD, ACCEPTED;
+
+        private EnumResourcePackStatus() {}
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java
new file mode 100644
index 0000000..9a83510
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java
@@ -0,0 +1,30 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutAttachEntity implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private int b;
+
+    public PacketPlayOutAttachEntity() {}
+
+    public PacketPlayOutAttachEntity(Entity entity, Entity entity1) {
+        this.a = entity.getId();
+        this.b = entity1 != null ? entity1.getId() : -1;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readInt();
+        this.b = packetdataserializer.readInt();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeInt(this.a);
+        packetdataserializer.writeInt(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutChat.java b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
new file mode 100644
index 0000000..c5147b6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
@@ -0,0 +1,38 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
+
+    private IChatBaseComponent a;
+    private byte b;
+
+    public PacketPlayOutChat() {}
+
+    public PacketPlayOutChat(IChatBaseComponent ichatbasecomponent) {
+        this(ichatbasecomponent, (byte) 1);
+    }
+
+    public PacketPlayOutChat(IChatBaseComponent ichatbasecomponent, byte b0) {
+        this.a = ichatbasecomponent;
+        this.b = b0;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.f();
+        this.b = packetdataserializer.readByte();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public boolean b() {
+        return this.b == 1 || this.b == 2;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java
new file mode 100644
index 0000000..6291657
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java
@@ -0,0 +1,30 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutEntityHeadRotation implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private byte b;
+
+    public PacketPlayOutEntityHeadRotation() {}
+
+    public PacketPlayOutEntityHeadRotation(Entity entity, byte b0) {
+        this.a = entity.getId();
+        this.b = b0;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.readByte();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.writeByte(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
new file mode 100644
index 0000000..cd4ab44
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -0,0 +1,36 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+
+public class PacketPlayOutEntityMetadata implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private List<DataWatcher.Item<?>> b;
+
+    public PacketPlayOutEntityMetadata() {}
+
+    public PacketPlayOutEntityMetadata(int i, DataWatcher datawatcher, boolean flag) {
+        this.a = i;
+        if (flag) {
+            this.b = datawatcher.c();
+        } else {
+            this.b = datawatcher.b();
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        DataWatcher.a(this.b, packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
new file mode 100644
index 0000000..82ab3ad
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
@@ -0,0 +1,50 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutEntityTeleport implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private double b;
+    private double c;
+    private double d;
+    private byte e;
+    private byte f;
+    private boolean g;
+
+    public PacketPlayOutEntityTeleport() {}
+
+    public PacketPlayOutEntityTeleport(Entity entity) {
+        this.a = entity.getId();
+        this.b = entity.locX;
+        this.c = entity.locY;
+        this.d = entity.locZ;
+        this.e = (byte) ((int) (entity.yaw * 256.0F / 360.0F));
+        this.f = (byte) ((int) (entity.pitch * 256.0F / 360.0F));
+        this.g = entity.onGround;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.readDouble();
+        this.c = packetdataserializer.readDouble();
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readByte();
+        this.f = packetdataserializer.readByte();
+        this.g = packetdataserializer.readBoolean();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.writeDouble(this.b);
+        packetdataserializer.writeDouble(this.c);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeByte(this.e);
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.writeBoolean(this.g);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
new file mode 100644
index 0000000..b5dc220
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -0,0 +1,110 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import java.io.IOException;
+
+public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private int b;
+    private int c;
+    private byte[] d;
+    private boolean e;
+
+    public PacketPlayOutMapChunk() {}
+
+    public PacketPlayOutMapChunk(Chunk chunk, boolean flag, int i) {
+        this.a = chunk.locX;
+        this.b = chunk.locZ;
+        this.e = flag;
+        boolean flag1 = !chunk.getWorld().worldProvider.m();
+
+        this.d = new byte[a(chunk, flag, flag1, i)];
+        this.c = a(new PacketDataSerializer(this.f()), chunk, flag, flag1, i);
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readInt();
+        this.b = packetdataserializer.readInt();
+        this.e = packetdataserializer.readBoolean();
+        this.c = packetdataserializer.g();
+        int i = packetdataserializer.g();
+
+        if (i > 2097152) {
+            throw new RuntimeException("Chunk Packet trying to allocate too much memory on read.");
+        } else {
+            this.d = new byte[i];
+            packetdataserializer.readBytes(this.d);
+        }
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeInt(this.a);
+        packetdataserializer.writeInt(this.b);
+        packetdataserializer.writeBoolean(this.e);
+        packetdataserializer.b(this.c);
+        packetdataserializer.b(this.d.length);
+        packetdataserializer.writeBytes(this.d);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    private ByteBuf f() {
+        ByteBuf bytebuf = Unpooled.wrappedBuffer(this.d);
+
+        bytebuf.writerIndex(0);
+        return bytebuf;
+    }
+
+    public static int a(PacketDataSerializer packetdataserializer, Chunk chunk, boolean flag, boolean flag1, int i) {
+        int j = 0;
+        ChunkSection[] achunksection = chunk.getSections();
+        int k = 0;
+
+        for (int l = achunksection.length; k < l; ++k) {
+            ChunkSection chunksection = achunksection[k];
+
+            if (chunksection != Chunk.a && (!flag || !chunksection.a()) && (i & 1 << k) != 0) {
+                j |= 1 << k;
+                chunksection.getBlocks().b(packetdataserializer);
+                packetdataserializer.writeBytes(chunksection.getEmittedLightArray().asBytes());
+                if (flag1) {
+                    packetdataserializer.writeBytes(chunksection.getSkyLightArray().asBytes());
+                }
+            }
+        }
+
+        if (flag) {
+            packetdataserializer.writeBytes(chunk.getBiomeIndex());
+        }
+
+        return j;
+    }
+
+    protected static int a(Chunk chunk, boolean flag, boolean flag1, int i) {
+        int j = 0;
+        ChunkSection[] achunksection = chunk.getSections();
+        int k = 0;
+
+        for (int l = achunksection.length; k < l; ++k) {
+            ChunkSection chunksection = achunksection[k];
+
+            if (chunksection != Chunk.a && (!flag || !chunksection.a()) && (i & 1 << k) != 0) {
+                j += chunksection.getBlocks().a();
+                j += chunksection.getEmittedLightArray().asBytes().length;
+                if (flag1) {
+                    j += chunksection.getSkyLightArray().asBytes().length;
+                }
+            }
+        }
+
+        if (flag) {
+            j += chunk.getBiomeIndex().length;
+        }
+
+        return j;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMount.java b/src/main/java/net/minecraft/server/PacketPlayOutMount.java
new file mode 100644
index 0000000..6afe2ca
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMount.java
@@ -0,0 +1,38 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+
+public class PacketPlayOutMount implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private int[] b;
+
+    public PacketPlayOutMount() {}
+
+    public PacketPlayOutMount(Entity entity) {
+        this.a = entity.getId();
+        List list = entity.bu();
+
+        this.b = new int[list.size()];
+
+        for (int i = 0; i < list.size(); ++i) {
+            this.b[i] = ((Entity) list.get(i)).getId();
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.b();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.a(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
new file mode 100644
index 0000000..ecb66ab
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
@@ -0,0 +1,57 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.UUID;
+
+public class PacketPlayOutNamedEntitySpawn implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private UUID b;
+    private double c;
+    private double d;
+    private double e;
+    private byte f;
+    private byte g;
+    private DataWatcher h;
+    private List<DataWatcher.Item<?>> i;
+
+    public PacketPlayOutNamedEntitySpawn() {}
+
+    public PacketPlayOutNamedEntitySpawn(EntityHuman entityhuman) {
+        this.a = entityhuman.getId();
+        this.b = entityhuman.getProfile().getId();
+        this.c = entityhuman.locX;
+        this.d = entityhuman.locY;
+        this.e = entityhuman.locZ;
+        this.f = (byte) ((int) (entityhuman.yaw * 256.0F / 360.0F));
+        this.g = (byte) ((int) (entityhuman.pitch * 256.0F / 360.0F));
+        this.h = entityhuman.getDataWatcher();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.i();
+        this.c = packetdataserializer.readDouble();
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readDouble();
+        this.f = packetdataserializer.readByte();
+        this.g = packetdataserializer.readByte();
+        this.i = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.writeDouble(this.c);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeDouble(this.e);
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.writeByte(this.g);
+        this.h.a(packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java b/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java
new file mode 100644
index 0000000..2bcdc17
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutOpenWindow implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private String b;
+    private IChatBaseComponent c;
+    private int d;
+    private int e;
+
+    public PacketPlayOutOpenWindow() {}
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent) {
+        this(i, s, ichatbasecomponent, 0);
+    }
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent, int j) {
+        this.a = i;
+        this.b = s;
+        this.c = ichatbasecomponent;
+        this.d = j;
+    }
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent, int j, int k) {
+        this(i, s, ichatbasecomponent, j);
+        this.e = k;
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readUnsignedByte();
+        this.b = packetdataserializer.c(32);
+        this.c = packetdataserializer.f();
+        this.d = packetdataserializer.readUnsignedByte();
+        if (this.b.equals("EntityHorse")) {
+            this.e = packetdataserializer.readInt();
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeByte(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.a(this.c);
+        packetdataserializer.writeByte(this.d);
+        if (this.b.equals("EntityHorse")) {
+            packetdataserializer.writeInt(this.e);
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
new file mode 100644
index 0000000..1764b92
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -0,0 +1,254 @@
+package net.minecraft.server;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.properties.Property;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+
+public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
+
+    private PacketPlayOutPlayerInfo.EnumPlayerInfoAction a;
+    private final List<PacketPlayOutPlayerInfo.PlayerInfoData> b = Lists.newArrayList();
+
+    public PacketPlayOutPlayerInfo() {}
+
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
+        this.a = packetplayoutplayerinfo_enumplayerinfoaction;
+        EntityPlayer[] aentityplayer1 = aentityplayer;
+        int i = aentityplayer.length;
+
+        for (int j = 0; j < i; ++j) {
+            EntityPlayer entityplayer = aentityplayer1[j];
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, Iterable<EntityPlayer> iterable) {
+        this.a = packetplayoutplayerinfo_enumplayerinfoaction;
+        Iterator iterator = iterable.iterator();
+
+        while (iterator.hasNext()) {
+            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = (PacketPlayOutPlayerInfo.EnumPlayerInfoAction) packetdataserializer.a(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.class);
+        int i = packetdataserializer.g();
+
+        for (int j = 0; j < i; ++j) {
+            GameProfile gameprofile = null;
+            int k = 0;
+            WorldSettings.EnumGamemode worldsettings_enumgamemode = null;
+            IChatBaseComponent ichatbasecomponent = null;
+
+            switch (PacketPlayOutPlayerInfo.SyntheticClass_1.a[this.a.ordinal()]) {
+            case 1:
+                gameprofile = new GameProfile(packetdataserializer.i(), packetdataserializer.c(16));
+                int l = packetdataserializer.g();
+
+                for (int i1 = 0; i1 < l; ++i1) {
+                    String s = packetdataserializer.c(32767);
+                    String s1 = packetdataserializer.c(32767);
+
+                    if (packetdataserializer.readBoolean()) {
+                        gameprofile.getProperties().put(s, new Property(s, s1, packetdataserializer.c(32767)));
+                    } else {
+                        gameprofile.getProperties().put(s, new Property(s, s1));
+                    }
+                }
+
+                worldsettings_enumgamemode = WorldSettings.EnumGamemode.getById(packetdataserializer.g());
+                k = packetdataserializer.g();
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.f();
+                }
+                break;
+
+            case 2:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+                worldsettings_enumgamemode = WorldSettings.EnumGamemode.getById(packetdataserializer.g());
+                break;
+
+            case 3:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+                k = packetdataserializer.g();
+                break;
+
+            case 4:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.f();
+                }
+                break;
+
+            case 5:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+            }
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(gameprofile, k, worldsettings_enumgamemode, ichatbasecomponent));
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.b(this.b.size());
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            PacketPlayOutPlayerInfo.PlayerInfoData packetplayoutplayerinfo_playerinfodata = (PacketPlayOutPlayerInfo.PlayerInfoData) iterator.next();
+
+            switch (PacketPlayOutPlayerInfo.SyntheticClass_1.a[this.a.ordinal()]) {
+            case 1:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getName());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.a().getProperties().size());
+                Iterator iterator1 = packetplayoutplayerinfo_playerinfodata.a().getProperties().values().iterator();
+
+                while (iterator1.hasNext()) {
+                    Property property = (Property) iterator1.next();
+
+                    packetdataserializer.a(property.getName());
+                    packetdataserializer.a(property.getValue());
+                    if (property.hasSignature()) {
+                        packetdataserializer.writeBoolean(true);
+                        packetdataserializer.a(property.getSignature());
+                    } else {
+                        packetdataserializer.writeBoolean(false);
+                    }
+                }
+
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.c().getId());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.b());
+                if (packetplayoutplayerinfo_playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.d());
+                }
+                break;
+
+            case 2:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.c().getId());
+                break;
+
+            case 3:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.b(packetplayoutplayerinfo_playerinfodata.b());
+                break;
+
+            case 4:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                if (packetplayoutplayerinfo_playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.d());
+                }
+                break;
+
+            case 5:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public String toString() {
+        return Objects.toStringHelper(this).add("action", this.a).add("entries", this.b).toString();
+    }
+
+    static class SyntheticClass_1 {
+
+        static final int[] a = new int[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.values().length];
+
+        static {
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror1) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_LATENCY.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror2) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME.ordinal()] = 4;
+            } catch (NoSuchFieldError nosuchfielderror3) {
+                ;
+            }
+
+            try {
+                PacketPlayOutPlayerInfo.SyntheticClass_1.a[PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER.ordinal()] = 5;
+            } catch (NoSuchFieldError nosuchfielderror4) {
+                ;
+            }
+
+        }
+    }
+
+    public class PlayerInfoData {
+
+        private final int b;
+        private final WorldSettings.EnumGamemode c;
+        private final GameProfile d;
+        private final IChatBaseComponent e;
+
+        public PlayerInfoData(GameProfile gameprofile, int i, WorldSettings.EnumGamemode worldsettings_enumgamemode, IChatBaseComponent ichatbasecomponent) {
+            this.d = gameprofile;
+            this.b = i;
+            this.c = worldsettings_enumgamemode;
+            this.e = ichatbasecomponent;
+        }
+
+        public GameProfile a() {
+            return this.d;
+        }
+
+        public int b() {
+            return this.b;
+        }
+
+        public WorldSettings.EnumGamemode c() {
+            return this.c;
+        }
+
+        public IChatBaseComponent d() {
+            return this.e;
+        }
+
+        public String toString() {
+            return Objects.toStringHelper(this).add("latency", this.b).add("gameMode", this.c).add("profile", this.d).add("displayName", this.e == null ? null : IChatBaseComponent.ChatSerializer.a(this.e)).toString();
+        }
+    }
+
+    public static enum EnumPlayerInfoAction {
+
+        ADD_PLAYER, UPDATE_GAME_MODE, UPDATE_LATENCY, UPDATE_DISPLAY_NAME, REMOVE_PLAYER;
+
+        private EnumPlayerInfoAction() {}
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
new file mode 100644
index 0000000..5f5b382
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
@@ -0,0 +1,29 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutPlayerListHeaderFooter implements Packet<PacketListenerPlayOut> {
+
+    private IChatBaseComponent a;
+    private IChatBaseComponent b;
+
+    public PacketPlayOutPlayerListHeaderFooter() {}
+
+    public PacketPlayOutPlayerListHeaderFooter(IChatBaseComponent ichatbasecomponent) {
+        this.a = ichatbasecomponent;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.f();
+        this.b = packetdataserializer.f();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.a(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
new file mode 100644
index 0000000..543f56e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -0,0 +1,119 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+
+public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut> {
+
+    private String a = "";
+    private String b = "";
+    private String c = "";
+    private String d = "";
+    private String e;
+    private String f;
+    private int g;
+    private Collection<String> h;
+    private int i;
+    private int j;
+
+    public PacketPlayOutScoreboardTeam() {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
+        this.g = -1;
+        this.h = Lists.newArrayList();
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, int i) {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
+        this.g = -1;
+        this.h = Lists.newArrayList();
+        this.a = scoreboardteam.getName();
+        this.i = i;
+        if (i == 0 || i == 2) {
+            this.b = scoreboardteam.getDisplayName();
+            this.c = scoreboardteam.getPrefix();
+            this.d = scoreboardteam.getSuffix();
+            this.j = scoreboardteam.packOptionData();
+            this.e = scoreboardteam.getNameTagVisibility().e;
+            this.f = scoreboardteam.k().e;
+            this.g = scoreboardteam.m().b();
+        }
+
+        if (i == 0) {
+            this.h.addAll(scoreboardteam.getPlayerNameSet());
+        }
+
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, Collection<String> collection, int i) {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
+        this.g = -1;
+        this.h = Lists.newArrayList();
+        if (i != 3 && i != 4) {
+            throw new IllegalArgumentException("Method must be join or leave for player constructor");
+        } else if (collection != null && !collection.isEmpty()) {
+            this.i = i;
+            this.a = scoreboardteam.getName();
+            this.h.addAll(collection);
+        } else {
+            throw new IllegalArgumentException("Players cannot be null/empty");
+        }
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.c(16);
+        this.i = packetdataserializer.readByte();
+        if (this.i == 0 || this.i == 2) {
+            this.b = packetdataserializer.c(32);
+            this.c = packetdataserializer.c(16);
+            this.d = packetdataserializer.c(16);
+            this.j = packetdataserializer.readByte();
+            this.e = packetdataserializer.c(32);
+            this.f = packetdataserializer.c(32);
+            this.g = packetdataserializer.readByte();
+        }
+
+        if (this.i == 0 || this.i == 3 || this.i == 4) {
+            int i = packetdataserializer.g();
+
+            for (int j = 0; j < i; ++j) {
+                this.h.add(packetdataserializer.c(40));
+            }
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte(this.i);
+        if (this.i == 0 || this.i == 2) {
+            packetdataserializer.a(this.b);
+            packetdataserializer.a(this.c);
+            packetdataserializer.a(this.d);
+            packetdataserializer.writeByte(this.j);
+            packetdataserializer.a(this.e);
+            packetdataserializer.a(this.f);
+            packetdataserializer.writeByte(this.g);
+        }
+
+        if (this.i == 0 || this.i == 3 || this.i == 4) {
+            packetdataserializer.b(this.h.size());
+            Iterator iterator = this.h.iterator();
+
+            while (iterator.hasNext()) {
+                String s = (String) iterator.next();
+
+                packetdataserializer.a(s);
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
new file mode 100644
index 0000000..2e4d7e5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
@@ -0,0 +1,96 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class PacketPlayOutSpawnEntity implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private UUID b;
+    private double c;
+    private double d;
+    private double e;
+    private int f;
+    private int g;
+    private int h;
+    private int i;
+    private int j;
+    private int k;
+    private int l;
+
+    public PacketPlayOutSpawnEntity() {}
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i) {
+        this(entity, i, 0);
+    }
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i, int j) {
+        this.a = entity.getId();
+        this.b = entity.getUniqueID();
+        this.c = entity.locX;
+        this.d = entity.locY;
+        this.e = entity.locZ;
+        this.i = MathHelper.d(entity.pitch * 256.0F / 360.0F);
+        this.j = MathHelper.d(entity.yaw * 256.0F / 360.0F);
+        this.k = i;
+        this.l = j;
+        double d0 = 3.9D;
+
+        this.f = (int) (MathHelper.a(entity.motX, -3.9D, 3.9D) * 8000.0D);
+        this.g = (int) (MathHelper.a(entity.motY, -3.9D, 3.9D) * 8000.0D);
+        this.h = (int) (MathHelper.a(entity.motZ, -3.9D, 3.9D) * 8000.0D);
+    }
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i, int j, BlockPosition blockposition) {
+        this(entity, i, j);
+        this.c = (double) blockposition.getX();
+        this.d = (double) blockposition.getY();
+        this.e = (double) blockposition.getZ();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.i();
+        this.k = packetdataserializer.readByte();
+        this.c = packetdataserializer.readDouble();
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readDouble();
+        this.i = packetdataserializer.readByte();
+        this.j = packetdataserializer.readByte();
+        this.l = packetdataserializer.readInt();
+        this.f = packetdataserializer.readShort();
+        this.g = packetdataserializer.readShort();
+        this.h = packetdataserializer.readShort();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.writeByte(this.k);
+        packetdataserializer.writeDouble(this.c);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeDouble(this.e);
+        packetdataserializer.writeByte(this.i);
+        packetdataserializer.writeByte(this.j);
+        packetdataserializer.writeInt(this.l);
+        packetdataserializer.writeShort(this.f);
+        packetdataserializer.writeShort(this.g);
+        packetdataserializer.writeShort(this.h);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(int i) {
+        this.f = i;
+    }
+
+    public void b(int i) {
+        this.g = i;
+    }
+
+    public void c(int i) {
+        this.h = i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
new file mode 100644
index 0000000..76aa2c1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
@@ -0,0 +1,106 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.UUID;
+
+public class PacketPlayOutSpawnEntityLiving implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private UUID b;
+    private int c;
+    private double d;
+    private double e;
+    private double f;
+    private int g;
+    private int h;
+    private int i;
+    private byte j;
+    private byte k;
+    private byte l;
+    private DataWatcher m;
+    private List<DataWatcher.Item<?>> n;
+
+    public PacketPlayOutSpawnEntityLiving() {}
+
+    public PacketPlayOutSpawnEntityLiving(EntityLiving entityliving) {
+        this.a = entityliving.getId();
+        this.b = entityliving.getUniqueID();
+        this.c = (byte) EntityTypes.a((Entity) entityliving);
+        this.d = entityliving.locX;
+        this.e = entityliving.locY;
+        this.f = entityliving.locZ;
+        this.j = (byte) ((int) (entityliving.yaw * 256.0F / 360.0F));
+        this.k = (byte) ((int) (entityliving.pitch * 256.0F / 360.0F));
+        this.l = (byte) ((int) (entityliving.aO * 256.0F / 360.0F));
+        double d0 = 3.9D;
+        double d1 = entityliving.motX;
+        double d2 = entityliving.motY;
+        double d3 = entityliving.motZ;
+
+        if (d1 < -d0) {
+            d1 = -d0;
+        }
+
+        if (d2 < -d0) {
+            d2 = -d0;
+        }
+
+        if (d3 < -d0) {
+            d3 = -d0;
+        }
+
+        if (d1 > d0) {
+            d1 = d0;
+        }
+
+        if (d2 > d0) {
+            d2 = d0;
+        }
+
+        if (d3 > d0) {
+            d3 = d0;
+        }
+
+        this.g = (int) (d1 * 8000.0D);
+        this.h = (int) (d2 * 8000.0D);
+        this.i = (int) (d3 * 8000.0D);
+        this.m = entityliving.getDataWatcher();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.i();
+        this.c = packetdataserializer.readByte() & 255;
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readDouble();
+        this.f = packetdataserializer.readDouble();
+        this.j = packetdataserializer.readByte();
+        this.k = packetdataserializer.readByte();
+        this.l = packetdataserializer.readByte();
+        this.g = packetdataserializer.readShort();
+        this.h = packetdataserializer.readShort();
+        this.i = packetdataserializer.readShort();
+        this.n = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.writeByte(this.c & 255);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeDouble(this.e);
+        packetdataserializer.writeDouble(this.f);
+        packetdataserializer.writeByte(this.j);
+        packetdataserializer.writeByte(this.k);
+        packetdataserializer.writeByte(this.l);
+        packetdataserializer.writeShort(this.g);
+        packetdataserializer.writeShort(this.h);
+        packetdataserializer.writeShort(this.i);
+        this.m.a(packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
new file mode 100644
index 0000000..2286c9e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -0,0 +1,99 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
+
+    private PacketPlayOutTitle.EnumTitleAction a;
+    private IChatBaseComponent b;
+    private int c;
+    private int d;
+    private int e;
+
+    public PacketPlayOutTitle() {}
+
+    public PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction, IChatBaseComponent ichatbasecomponent) {
+        this(packetplayouttitle_enumtitleaction, ichatbasecomponent, -1, -1, -1);
+    }
+
+    public PacketPlayOutTitle(int i, int j, int k) {
+        this(PacketPlayOutTitle.EnumTitleAction.TIMES, (IChatBaseComponent) null, i, j, k);
+    }
+
+    public PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction, IChatBaseComponent ichatbasecomponent, int i, int j, int k) {
+        this.a = packetplayouttitle_enumtitleaction;
+        this.b = ichatbasecomponent;
+        this.c = i;
+        this.d = j;
+        this.e = k;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = (PacketPlayOutTitle.EnumTitleAction) packetdataserializer.a(PacketPlayOutTitle.EnumTitleAction.class);
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE) {
+            this.b = packetdataserializer.f();
+        }
+
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TIMES) {
+            this.c = packetdataserializer.readInt();
+            this.d = packetdataserializer.readInt();
+            this.e = packetdataserializer.readInt();
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a((Enum) this.a);
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE) {
+            packetdataserializer.a(this.b);
+        }
+
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TIMES) {
+            packetdataserializer.writeInt(this.c);
+            packetdataserializer.writeInt(this.d);
+            packetdataserializer.writeInt(this.e);
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public static enum EnumTitleAction {
+
+        TITLE, SUBTITLE, TIMES, CLEAR, RESET;
+
+        private EnumTitleAction() {}
+
+        public static PacketPlayOutTitle.EnumTitleAction a(String s) {
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
+            int i = apacketplayouttitle_enumtitleaction.length;
+
+            for (int j = 0; j < i; ++j) {
+                PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction = apacketplayouttitle_enumtitleaction[j];
+
+                if (packetplayouttitle_enumtitleaction.name().equalsIgnoreCase(s)) {
+                    return packetplayouttitle_enumtitleaction;
+                }
+            }
+
+            return PacketPlayOutTitle.EnumTitleAction.TITLE;
+        }
+
+        public static String[] a() {
+            String[] astring = new String[values().length];
+            int i = 0;
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
+            int j = apacketplayouttitle_enumtitleaction.length;
+
+            for (int k = 0; k < j; ++k) {
+                PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction = apacketplayouttitle_enumtitleaction[k];
+
+                astring[i++] = packetplayouttitle_enumtitleaction.name().toLowerCase();
+            }
+
+            return astring;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PotionUtil.java b/src/main/java/net/minecraft/server/PotionUtil.java
new file mode 100644
index 0000000..b091517
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PotionUtil.java
@@ -0,0 +1,136 @@
+package net.minecraft.server;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Lists;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+public class PotionUtil {
+
+    public static List<MobEffect> getEffects(ItemStack itemstack) {
+        return a(itemstack.getTag());
+    }
+
+    public static List<MobEffect> a(PotionRegistry potionregistry, Collection<MobEffect> collection) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        arraylist.addAll(potionregistry.a());
+        arraylist.addAll(collection);
+        return arraylist;
+    }
+
+    public static List<MobEffect> a(NBTTagCompound nbttagcompound) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        arraylist.addAll(c(nbttagcompound).a());
+        a(nbttagcompound, (List) arraylist);
+        return arraylist;
+    }
+
+    public static List<MobEffect> b(ItemStack itemstack) {
+        return b(itemstack.getTag());
+    }
+
+    public static List<MobEffect> b(NBTTagCompound nbttagcompound) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        a(nbttagcompound, (List) arraylist);
+        return arraylist;
+    }
+
+    public static void a(NBTTagCompound nbttagcompound, List<MobEffect> list) {
+        if (nbttagcompound != null && nbttagcompound.hasKeyOfType("CustomPotionEffects", 9)) {
+            NBTTagList nbttaglist = nbttagcompound.getList("CustomPotionEffects", 10);
+
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
+                MobEffect mobeffect = MobEffect.b(nbttagcompound1);
+
+                if (mobeffect != null) {
+                    list.add(mobeffect);
+                }
+            }
+        }
+
+    }
+
+    public static int a(Collection<MobEffect> collection) {
+        int i = 3694022;
+
+        if (collection.isEmpty()) {
+            return 3694022;
+        } else {
+            float f = 0.0F;
+            float f1 = 0.0F;
+            float f2 = 0.0F;
+            int j = 0;
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                MobEffect mobeffect = (MobEffect) iterator.next();
+
+                if (mobeffect.isShowParticles()) {
+                    int k = mobeffect.getMobEffect().getColor();
+                    int l = mobeffect.getAmplifier() + 1;
+
+                    f += (float) (l * (k >> 16 & 255)) / 255.0F;
+                    f1 += (float) (l * (k >> 8 & 255)) / 255.0F;
+                    f2 += (float) (l * (k >> 0 & 255)) / 255.0F;
+                    j += l;
+                }
+            }
+
+            if (j == 0) {
+                return 0;
+            } else {
+                f = f / (float) j * 255.0F;
+                f1 = f1 / (float) j * 255.0F;
+                f2 = f2 / (float) j * 255.0F;
+                return (int) f << 16 | (int) f1 << 8 | (int) f2;
+            }
+        }
+    }
+
+    public static PotionRegistry c(ItemStack itemstack) {
+        return c(itemstack.getTag());
+    }
+
+    public static PotionRegistry c(NBTTagCompound nbttagcompound) {
+        return nbttagcompound == null ? Potions.b : PotionRegistry.a(nbttagcompound.getString("Potion"));
+    }
+
+    public static ItemStack a(ItemStack itemstack, PotionRegistry potionregistry) {
+        MinecraftKey minecraftkey = (MinecraftKey) PotionRegistry.a.b(potionregistry);
+
+        if (minecraftkey != null) {
+            NBTTagCompound nbttagcompound = itemstack.hasTag() ? itemstack.getTag() : new NBTTagCompound();
+
+            nbttagcompound.setString("Potion", minecraftkey.toString());
+            itemstack.setTag(nbttagcompound);
+        }
+
+        return itemstack;
+    }
+
+    public static ItemStack a(ItemStack itemstack, Collection<MobEffect> collection) {
+        if (collection.isEmpty()) {
+            return itemstack;
+        } else {
+            NBTTagCompound nbttagcompound = (NBTTagCompound) Objects.firstNonNull(itemstack.getTag(), new NBTTagCompound());
+            NBTTagList nbttaglist = nbttagcompound.getList("CustomPotionEffects", 9);
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                MobEffect mobeffect = (MobEffect) iterator.next();
+
+                nbttaglist.add(mobeffect.a(new NBTTagCompound()));
+            }
+
+            nbttagcompound.set("CustomPotionEffects", nbttaglist);
+            itemstack.setTag(nbttagcompound);
+            return itemstack;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
new file mode 100644
index 0000000..b07e7d5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -0,0 +1,67 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Maps;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.Map;
+
+public class RegionFileCache {
+
+    private static final Map<File, RegionFile> a = Maps.newHashMap();
+
+    public static synchronized RegionFile a(File file, int i, int j) {
+        File file1 = new File(file, "region");
+        File file2 = new File(file1, "r." + (i >> 5) + "." + (j >> 5) + ".mca");
+        RegionFile regionfile = (RegionFile) RegionFileCache.a.get(file2);
+
+        if (regionfile != null) {
+            return regionfile;
+        } else {
+            if (!file1.exists()) {
+                file1.mkdirs();
+            }
+
+            if (RegionFileCache.a.size() >= 256) {
+                a();
+            }
+
+            RegionFile regionfile1 = new RegionFile(file2);
+
+            RegionFileCache.a.put(file2, regionfile1);
+            return regionfile1;
+        }
+    }
+
+    public static synchronized void a() {
+        Iterator iterator = RegionFileCache.a.values().iterator();
+
+        while (iterator.hasNext()) {
+            RegionFile regionfile = (RegionFile) iterator.next();
+
+            try {
+                if (regionfile != null) {
+                    regionfile.c();
+                }
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+            }
+        }
+
+        RegionFileCache.a.clear();
+    }
+
+    public static DataInputStream c(File file, int i, int j) {
+        RegionFile regionfile = a(file, i, j);
+
+        return regionfile.a(i & 31, j & 31);
+    }
+
+    public static DataOutputStream d(File file, int i, int j) {
+        RegionFile regionfile = a(file, i, j);
+
+        return regionfile.b(i & 31, j & 31);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ScoreboardTeam.java b/src/main/java/net/minecraft/server/ScoreboardTeam.java
new file mode 100644
index 0000000..71d372f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ScoreboardTeam.java
@@ -0,0 +1,149 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Sets;
+import java.util.Collection;
+import java.util.Set;
+
+public class ScoreboardTeam extends ScoreboardTeamBase {
+
+    private final Scoreboard a;
+    private final String b;
+    private final Set<String> c = Sets.newHashSet();
+    private String d;
+    private String e = "";
+    private String f = "";
+    private boolean g = true;
+    private boolean h = true;
+    private ScoreboardTeamBase.EnumNameTagVisibility i;
+    private ScoreboardTeamBase.EnumNameTagVisibility j;
+    private EnumChatFormat k;
+    private ScoreboardTeamBase.EnumTeamPush l;
+
+    public ScoreboardTeam(Scoreboard scoreboard, String s) {
+        this.i = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS;
+        this.j = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS;
+        this.k = EnumChatFormat.RESET;
+        this.l = ScoreboardTeamBase.EnumTeamPush.ALWAYS;
+        this.a = scoreboard;
+        this.b = s;
+        this.d = s;
+    }
+
+    public String getName() {
+        return this.b;
+    }
+
+    public String getDisplayName() {
+        return this.d;
+    }
+
+    public void setDisplayName(String s) {
+        if (s == null) {
+            throw new IllegalArgumentException("Name cannot be null");
+        } else {
+            this.d = s;
+            this.a.handleTeamChanged(this);
+        }
+    }
+
+    public Collection<String> getPlayerNameSet() {
+        return this.c;
+    }
+
+    public String getPrefix() {
+        return this.e;
+    }
+
+    public void setPrefix(String s) {
+        if (s == null) {
+            throw new IllegalArgumentException("Prefix cannot be null");
+        } else {
+            this.e = s;
+            this.a.handleTeamChanged(this);
+        }
+    }
+
+    public String getSuffix() {
+        return this.f;
+    }
+
+    public void setSuffix(String s) {
+        this.f = s;
+        this.a.handleTeamChanged(this);
+    }
+
+    public String getFormattedName(String s) {
+        return this.getPrefix() + s + this.getSuffix();
+    }
+
+    public static String getPlayerDisplayName(ScoreboardTeamBase scoreboardteambase, String s) {
+        return scoreboardteambase == null ? s : scoreboardteambase.getFormattedName(s);
+    }
+
+    public boolean allowFriendlyFire() {
+        return this.g;
+    }
+
+    public void setAllowFriendlyFire(boolean flag) {
+        this.g = flag;
+        this.a.handleTeamChanged(this);
+    }
+
+    public boolean canSeeFriendlyInvisibles() {
+        return this.h;
+    }
+
+    public void setCanSeeFriendlyInvisibles(boolean flag) {
+        this.h = flag;
+        this.a.handleTeamChanged(this);
+    }
+
+    public ScoreboardTeamBase.EnumNameTagVisibility getNameTagVisibility() {
+        return this.i;
+    }
+
+    public ScoreboardTeamBase.EnumNameTagVisibility j() {
+        return this.j;
+    }
+
+    public void setNameTagVisibility(ScoreboardTeamBase.EnumNameTagVisibility scoreboardteambase_enumnametagvisibility) {
+        this.i = scoreboardteambase_enumnametagvisibility;
+        this.a.handleTeamChanged(this);
+    }
+
+    public void b(ScoreboardTeamBase.EnumNameTagVisibility scoreboardteambase_enumnametagvisibility) {
+        this.j = scoreboardteambase_enumnametagvisibility;
+        this.a.handleTeamChanged(this);
+    }
+
+    public ScoreboardTeamBase.EnumTeamPush k() {
+        return this.l;
+    }
+
+    public void a(ScoreboardTeamBase.EnumTeamPush scoreboardteambase_enumteampush) {
+        this.l = scoreboardteambase_enumteampush;
+        this.a.handleTeamChanged(this);
+    }
+
+    public int packOptionData() {
+        int i = 0;
+
+        if (this.allowFriendlyFire()) {
+            i |= 1;
+        }
+
+        if (this.canSeeFriendlyInvisibles()) {
+            i |= 2;
+        }
+
+        return i;
+    }
+
+    public void a(EnumChatFormat enumchatformat) {
+        this.k = enumchatformat;
+    }
+
+    public EnumChatFormat m() {
+        return this.k;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
new file mode 100644
index 0000000..37ad4cc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -0,0 +1,175 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelException;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.Epoll;
+import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.local.LocalEventLoopGroup;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.concurrent.Callable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ServerConnection {
+
+    private static final Logger e = LogManager.getLogger();
+    public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
+        protected NioEventLoopGroup a() {
+            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    public static final LazyInitVar<EpollEventLoopGroup> b = new LazyInitVar() {
+        protected EpollEventLoopGroup a() {
+            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    public static final LazyInitVar<LocalEventLoopGroup> c = new LazyInitVar() {
+        protected LocalEventLoopGroup a() {
+            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    private final MinecraftServer f;
+    public volatile boolean d;
+    private final List<ChannelFuture> g = Collections.synchronizedList(Lists.newArrayList());
+    private final List<NetworkManager> h = Collections.synchronizedList(Lists.newArrayList());
+
+    public ServerConnection(MinecraftServer minecraftserver) {
+        this.f = minecraftserver;
+        this.d = true;
+    }
+
+    public void a(InetAddress inetaddress, int i) throws IOException {
+        List list = this.g;
+
+        synchronized (this.g) {
+            Class oclass;
+            LazyInitVar lazyinitvar;
+
+            if (Epoll.isAvailable() && this.f.ae()) {
+                oclass = EpollServerSocketChannel.class;
+                lazyinitvar = ServerConnection.b;
+                ServerConnection.e.info("Using epoll channel type");
+            } else {
+                oclass = NioServerSocketChannel.class;
+                lazyinitvar = ServerConnection.a;
+                ServerConnection.e.info("Using default channel type");
+            }
+
+            this.g.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer() {
+                protected void initChannel(Channel channel) throws Exception {
+                    try {
+                        channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
+                    } catch (ChannelException channelexception) {
+                        ;
+                    }
+
+                    channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
+                    NetworkManager networkmanager = new NetworkManager(EnumProtocolDirection.SERVERBOUND);
+
+                    ServerConnection.this.h.add(networkmanager);
+                    channel.pipeline().addLast("packet_handler", networkmanager);
+                    networkmanager.setPacketListener(new HandshakeListener(ServerConnection.this.f, networkmanager));
+                }
+            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+        }
+    }
+
+    public void b() {
+        this.d = false;
+        Iterator iterator = this.g.iterator();
+
+        while (iterator.hasNext()) {
+            ChannelFuture channelfuture = (ChannelFuture) iterator.next();
+
+            try {
+                channelfuture.channel().close().sync();
+            } catch (InterruptedException interruptedexception) {
+                ServerConnection.e.error("Interrupted whilst closing channel");
+            }
+        }
+
+    }
+
+    public void c() {
+        List list = this.h;
+
+        synchronized (this.h) {
+            Iterator iterator = this.h.iterator();
+
+            while (iterator.hasNext()) {
+                final NetworkManager networkmanager = (NetworkManager) iterator.next();
+
+                if (!networkmanager.h()) {
+                    if (networkmanager.isConnected()) {
+                        try {
+                            networkmanager.a();
+                        } catch (Exception exception) {
+                            if (networkmanager.isLocal()) {
+                                CrashReport crashreport = CrashReport.a(exception, "Ticking memory connection");
+                                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Ticking connection");
+
+                                crashreportsystemdetails.a("Connection", new Callable() {
+                                    public String a() throws Exception {
+                                        return networkmanager.toString();
+                                    }
+
+                                    public Object call() throws Exception {
+                                        return this.a();
+                                    }
+                                });
+                                throw new ReportedException(crashreport);
+                            }
+
+                            ServerConnection.e.warn("Failed to handle packet for " + networkmanager.getSocketAddress(), exception);
+                            final ChatComponentText chatcomponenttext = new ChatComponentText("Internal server error");
+
+                            networkmanager.sendPacket(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
+                                public void operationComplete(Future<? super Void> future) throws Exception {
+                                    networkmanager.close(chatcomponenttext);
+                                }
+                            }, new GenericFutureListener[0]);
+                            networkmanager.stopReading();
+                        }
+                    } else {
+                        iterator.remove();
+                        networkmanager.handleDisconnection();
+                    }
+                }
+            }
+
+        }
+    }
+
+    public MinecraftServer d() {
+        return this.f;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SoundEffect.java b/src/main/java/net/minecraft/server/SoundEffect.java
new file mode 100644
index 0000000..d43a7b1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SoundEffect.java
@@ -0,0 +1,464 @@
+package net.minecraft.server;
+
+public class SoundEffect {
+
+    public static final RegistryMaterials<MinecraftKey, SoundEffect> a = new RegistryMaterials();
+    private final MinecraftKey b;
+    private static int c = 0;
+
+    public SoundEffect(MinecraftKey minecraftkey) {
+        this.b = minecraftkey;
+    }
+
+    public static void b() {
+        a("ambient.cave");
+        a("block.anvil.break");
+        a("block.anvil.destroy");
+        a("block.anvil.fall");
+        a("block.anvil.hit");
+        a("block.anvil.land");
+        a("block.anvil.place");
+        a("block.anvil.step");
+        a("block.anvil.use");
+        a("block.brewing_stand.brew");
+        a("block.chest.close");
+        a("block.chest.locked");
+        a("block.chest.open");
+        a("block.chorus_flower.death");
+        a("block.chorus_flower.grow");
+        a("block.cloth.break");
+        a("block.cloth.fall");
+        a("block.cloth.hit");
+        a("block.cloth.place");
+        a("block.cloth.step");
+        a("block.comparator.click");
+        a("block.dispenser.dispense");
+        a("block.dispenser.fail");
+        a("block.dispenser.launch");
+        a("block.end_gateway.spawn");
+        a("block.enderchest.close");
+        a("block.enderchest.open");
+        a("block.fence_gate.close");
+        a("block.fence_gate.open");
+        a("block.fire.ambient");
+        a("block.fire.extinguish");
+        a("block.furnace.fire_crackle");
+        a("block.glass.break");
+        a("block.glass.fall");
+        a("block.glass.hit");
+        a("block.glass.place");
+        a("block.glass.step");
+        a("block.grass.break");
+        a("block.grass.fall");
+        a("block.grass.hit");
+        a("block.grass.place");
+        a("block.grass.step");
+        a("block.gravel.break");
+        a("block.gravel.fall");
+        a("block.gravel.hit");
+        a("block.gravel.place");
+        a("block.gravel.step");
+        a("block.iron_door.close");
+        a("block.iron_door.open");
+        a("block.iron_trapdoor.close");
+        a("block.iron_trapdoor.open");
+        a("block.ladder.break");
+        a("block.ladder.fall");
+        a("block.ladder.hit");
+        a("block.ladder.place");
+        a("block.ladder.step");
+        a("block.lava.ambient");
+        a("block.lava.extinguish");
+        a("block.lava.pop");
+        a("block.lever.click");
+        a("block.metal.break");
+        a("block.metal.fall");
+        a("block.metal.hit");
+        a("block.metal.place");
+        a("block.metal.step");
+        a("block.metal_pressureplate.click_off");
+        a("block.metal_pressureplate.click_on");
+        a("block.note.basedrum");
+        a("block.note.bass");
+        a("block.note.harp");
+        a("block.note.hat");
+        a("block.note.pling");
+        a("block.note.snare");
+        a("block.piston.contract");
+        a("block.piston.extend");
+        a("block.portal.ambient");
+        a("block.portal.travel");
+        a("block.portal.trigger");
+        a("block.redstone_torch.burnout");
+        a("block.sand.break");
+        a("block.sand.fall");
+        a("block.sand.hit");
+        a("block.sand.place");
+        a("block.sand.step");
+        a("block.slime.break");
+        a("block.slime.fall");
+        a("block.slime.hit");
+        a("block.slime.place");
+        a("block.slime.step");
+        a("block.snow.break");
+        a("block.snow.fall");
+        a("block.snow.hit");
+        a("block.snow.place");
+        a("block.snow.step");
+        a("block.stone.break");
+        a("block.stone.fall");
+        a("block.stone.hit");
+        a("block.stone.place");
+        a("block.stone.step");
+        a("block.stone_button.click_off");
+        a("block.stone_button.click_on");
+        a("block.stone_pressureplate.click_off");
+        a("block.stone_pressureplate.click_on");
+        a("block.tripwire.attach");
+        a("block.tripwire.click_off");
+        a("block.tripwire.click_on");
+        a("block.tripwire.detach");
+        a("block.water.ambient");
+        a("block.waterlily.place");
+        a("block.wood.break");
+        a("block.wood.fall");
+        a("block.wood.hit");
+        a("block.wood.place");
+        a("block.wood.step");
+        a("block.wood_button.click_off");
+        a("block.wood_button.click_on");
+        a("block.wood_pressureplate.click_off");
+        a("block.wood_pressureplate.click_on");
+        a("block.wooden_door.close");
+        a("block.wooden_door.open");
+        a("block.wooden_trapdoor.close");
+        a("block.wooden_trapdoor.open");
+        a("enchant.thorns.hit");
+        a("entity.armorstand.break");
+        a("entity.armorstand.fall");
+        a("entity.armorstand.hit");
+        a("entity.armorstand.place");
+        a("entity.arrow.hit");
+        a("entity.arrow.hit_player");
+        a("entity.arrow.shoot");
+        a("entity.bat.ambient");
+        a("entity.bat.death");
+        a("entity.bat.hurt");
+        a("entity.bat.loop");
+        a("entity.bat.takeoff");
+        a("entity.blaze.ambient");
+        a("entity.blaze.burn");
+        a("entity.blaze.death");
+        a("entity.blaze.hurt");
+        a("entity.blaze.shoot");
+        a("entity.bobber.splash");
+        a("entity.bobber.throw");
+        a("entity.cat.ambient");
+        a("entity.cat.death");
+        a("entity.cat.hiss");
+        a("entity.cat.hurt");
+        a("entity.cat.purr");
+        a("entity.cat.purreow");
+        a("entity.chicken.ambient");
+        a("entity.chicken.death");
+        a("entity.chicken.egg");
+        a("entity.chicken.hurt");
+        a("entity.chicken.step");
+        a("entity.cow.ambient");
+        a("entity.cow.death");
+        a("entity.cow.hurt");
+        a("entity.cow.milk");
+        a("entity.cow.step");
+        a("entity.creeper.death");
+        a("entity.creeper.hurt");
+        a("entity.creeper.primed");
+        a("entity.donkey.ambient");
+        a("entity.donkey.angry");
+        a("entity.donkey.chest");
+        a("entity.donkey.death");
+        a("entity.donkey.hurt");
+        a("entity.egg.throw");
+        a("entity.elder_guardian.ambient");
+        a("entity.elder_guardian.ambient_land");
+        a("entity.elder_guardian.curse");
+        a("entity.elder_guardian.death");
+        a("entity.elder_guardian.death_land");
+        a("entity.elder_guardian.hurt");
+        a("entity.elder_guardian.hurt_land");
+        a("entity.enderdragon.ambient");
+        a("entity.enderdragon.death");
+        a("entity.enderdragon.flap");
+        a("entity.enderdragon.growl");
+        a("entity.enderdragon.hurt");
+        a("entity.enderdragon.shoot");
+        a("entity.enderdragon_fireball.explode");
+        a("entity.endereye.launch");
+        a("entity.endermen.ambient");
+        a("entity.endermen.death");
+        a("entity.endermen.hurt");
+        a("entity.endermen.scream");
+        a("entity.endermen.stare");
+        a("entity.endermen.teleport");
+        a("entity.endermite.ambient");
+        a("entity.endermite.death");
+        a("entity.endermite.hurt");
+        a("entity.endermite.step");
+        a("entity.enderpearl.throw");
+        a("entity.experience_bottle.throw");
+        a("entity.experience_orb.pickup");
+        a("entity.experience_orb.touch");
+        a("entity.firework.blast");
+        a("entity.firework.blast_far");
+        a("entity.firework.large_blast");
+        a("entity.firework.large_blast_far");
+        a("entity.firework.launch");
+        a("entity.firework.shoot");
+        a("entity.firework.twinkle");
+        a("entity.firework.twinkle_far");
+        a("entity.generic.big_fall");
+        a("entity.generic.burn");
+        a("entity.generic.death");
+        a("entity.generic.drink");
+        a("entity.generic.eat");
+        a("entity.generic.explode");
+        a("entity.generic.extinguish_fire");
+        a("entity.generic.hurt");
+        a("entity.generic.small_fall");
+        a("entity.generic.splash");
+        a("entity.generic.swim");
+        a("entity.ghast.ambient");
+        a("entity.ghast.death");
+        a("entity.ghast.hurt");
+        a("entity.ghast.scream");
+        a("entity.ghast.shoot");
+        a("entity.ghast.warn");
+        a("entity.guardian.ambient");
+        a("entity.guardian.ambient_land");
+        a("entity.guardian.attack");
+        a("entity.guardian.death");
+        a("entity.guardian.death_land");
+        a("entity.guardian.flop");
+        a("entity.guardian.hurt");
+        a("entity.guardian.hurt_land");
+        a("entity.horse.ambient");
+        a("entity.horse.angry");
+        a("entity.horse.armor");
+        a("entity.horse.breathe");
+        a("entity.horse.death");
+        a("entity.horse.eat");
+        a("entity.horse.gallop");
+        a("entity.horse.hurt");
+        a("entity.horse.jump");
+        a("entity.horse.land");
+        a("entity.horse.saddle");
+        a("entity.horse.step");
+        a("entity.horse.step_wood");
+        a("entity.hostile.big_fall");
+        a("entity.hostile.death");
+        a("entity.hostile.hurt");
+        a("entity.hostile.small_fall");
+        a("entity.hostile.splash");
+        a("entity.hostile.swim");
+        a("entity.irongolem.attack");
+        a("entity.irongolem.death");
+        a("entity.irongolem.hurt");
+        a("entity.irongolem.step");
+        a("entity.item.break");
+        a("entity.item.pickup");
+        a("entity.itemframe.add_item");
+        a("entity.itemframe.break");
+        a("entity.itemframe.place");
+        a("entity.itemframe.remove_item");
+        a("entity.itemframe.rotate_item");
+        a("entity.leashknot.break");
+        a("entity.leashknot.place");
+        a("entity.lightning.impact");
+        a("entity.lightning.thunder");
+        a("entity.lingeringpotion.throw");
+        a("entity.magmacube.death");
+        a("entity.magmacube.hurt");
+        a("entity.magmacube.jump");
+        a("entity.magmacube.squish");
+        a("entity.minecart.inside");
+        a("entity.minecart.riding");
+        a("entity.mooshroom.shear");
+        a("entity.mule.ambient");
+        a("entity.mule.death");
+        a("entity.mule.hurt");
+        a("entity.painting.break");
+        a("entity.painting.place");
+        a("entity.pig.ambient");
+        a("entity.pig.death");
+        a("entity.pig.hurt");
+        a("entity.pig.saddle");
+        a("entity.pig.step");
+        a("entity.player.attack.crit");
+        a("entity.player.attack.knockback");
+        a("entity.player.attack.nodamage");
+        a("entity.player.attack.strong");
+        a("entity.player.attack.sweep");
+        a("entity.player.attack.weak");
+        a("entity.player.big_fall");
+        a("entity.player.breath");
+        a("entity.player.burp");
+        a("entity.player.death");
+        a("entity.player.hurt");
+        a("entity.player.levelup");
+        a("entity.player.small_fall");
+        a("entity.player.splash");
+        a("entity.player.swim");
+        a("entity.rabbit.ambient");
+        a("entity.rabbit.attack");
+        a("entity.rabbit.death");
+        a("entity.rabbit.hurt");
+        a("entity.rabbit.jump");
+        a("entity.sheep.ambient");
+        a("entity.sheep.death");
+        a("entity.sheep.hurt");
+        a("entity.sheep.shear");
+        a("entity.sheep.step");
+        a("entity.shulker.ambient");
+        a("entity.shulker.close");
+        a("entity.shulker.death");
+        a("entity.shulker.hurt");
+        a("entity.shulker.hurt_closed");
+        a("entity.shulker.open");
+        a("entity.shulker.shoot");
+        a("entity.shulker.teleport");
+        a("entity.shulker_bullet.hit");
+        a("entity.shulker_bullet.hurt");
+        a("entity.silverfish.ambient");
+        a("entity.silverfish.death");
+        a("entity.silverfish.hurt");
+        a("entity.silverfish.step");
+        a("entity.skeleton.ambient");
+        a("entity.skeleton.death");
+        a("entity.skeleton.hurt");
+        a("entity.skeleton.shoot");
+        a("entity.skeleton.step");
+        a("entity.skeleton_horse.ambient");
+        a("entity.skeleton_horse.death");
+        a("entity.skeleton_horse.hurt");
+        a("entity.slime.attack");
+        a("entity.slime.death");
+        a("entity.slime.hurt");
+        a("entity.slime.jump");
+        a("entity.slime.squish");
+        a("entity.small_magmacube.death");
+        a("entity.small_magmacube.hurt");
+        a("entity.small_magmacube.squish");
+        a("entity.small_slime.death");
+        a("entity.small_slime.hurt");
+        a("entity.small_slime.jump");
+        a("entity.small_slime.squish");
+        a("entity.snowball.throw");
+        a("entity.snowman.ambient");
+        a("entity.snowman.death");
+        a("entity.snowman.hurt");
+        a("entity.snowman.shoot");
+        a("entity.spider.ambient");
+        a("entity.spider.death");
+        a("entity.spider.hurt");
+        a("entity.spider.step");
+        a("entity.splash_potion.break");
+        a("entity.splash_potion.throw");
+        a("entity.squid.ambient");
+        a("entity.squid.death");
+        a("entity.squid.hurt");
+        a("entity.tnt.primed");
+        a("entity.villager.ambient");
+        a("entity.villager.death");
+        a("entity.villager.hurt");
+        a("entity.villager.no");
+        a("entity.villager.trading");
+        a("entity.villager.yes");
+        a("entity.witch.ambient");
+        a("entity.witch.death");
+        a("entity.witch.drink");
+        a("entity.witch.hurt");
+        a("entity.witch.throw");
+        a("entity.wither.ambient");
+        a("entity.wither.break_block");
+        a("entity.wither.death");
+        a("entity.wither.hurt");
+        a("entity.wither.shoot");
+        a("entity.wither.spawn");
+        a("entity.wolf.ambient");
+        a("entity.wolf.death");
+        a("entity.wolf.growl");
+        a("entity.wolf.howl");
+        a("entity.wolf.hurt");
+        a("entity.wolf.pant");
+        a("entity.wolf.shake");
+        a("entity.wolf.step");
+        a("entity.wolf.whine");
+        a("entity.zombie.ambient");
+        a("entity.zombie.attack_door_wood");
+        a("entity.zombie.attack_iron_door");
+        a("entity.zombie.break_door_wood");
+        a("entity.zombie.death");
+        a("entity.zombie.hurt");
+        a("entity.zombie.infect");
+        a("entity.zombie.step");
+        a("entity.zombie_horse.ambient");
+        a("entity.zombie_horse.death");
+        a("entity.zombie_horse.hurt");
+        a("entity.zombie_pig.ambient");
+        a("entity.zombie_pig.angry");
+        a("entity.zombie_pig.death");
+        a("entity.zombie_pig.hurt");
+        a("entity.zombie_villager.ambient");
+        a("entity.zombie_villager.converted");
+        a("entity.zombie_villager.cure");
+        a("entity.zombie_villager.death");
+        a("entity.zombie_villager.hurt");
+        a("entity.zombie_villager.step");
+        a("item.armor.equip_chain");
+        a("item.armor.equip_diamond");
+        a("item.armor.equip_generic");
+        a("item.armor.equip_gold");
+        a("item.armor.equip_iron");
+        a("item.armor.equip_leather");
+        a("item.bottle.fill");
+        a("item.bottle.fill_dragonbreath");
+        a("item.bucket.empty");
+        a("item.bucket.empty_lava");
+        a("item.bucket.fill");
+        a("item.bucket.fill_lava");
+        a("item.chorus_fruit.teleport");
+        a("item.firecharge.use");
+        a("item.flintandsteel.use");
+        a("item.hoe.till");
+        a("item.shield.block");
+        a("item.shield.break");
+        a("item.shovel.flatten");
+        a("music.creative");
+        a("music.credits");
+        a("music.dragon");
+        a("music.end");
+        a("music.game");
+        a("music.menu");
+        a("music.nether");
+        a("record.11");
+        a("record.13");
+        a("record.blocks");
+        a("record.cat");
+        a("record.chirp");
+        a("record.far");
+        a("record.mall");
+        a("record.mellohi");
+        a("record.stal");
+        a("record.strad");
+        a("record.wait");
+        a("record.ward");
+        a("ui.button.click");
+        a("weather.rain");
+        a("weather.rain.above");
+    }
+
+    private static void a(String s) {
+        MinecraftKey minecraftkey = new MinecraftKey(s);
+
+        SoundEffect.a.a(SoundEffect.c++, minecraftkey, new SoundEffect(minecraftkey));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SoundEffectType.java b/src/main/java/net/minecraft/server/SoundEffectType.java
new file mode 100644
index 0000000..8288833
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SoundEffectType.java
@@ -0,0 +1,54 @@
+package net.minecraft.server;
+
+public class SoundEffectType {
+
+    public static final SoundEffectType a = new SoundEffectType(1.0F, 1.0F, SoundEffects.gX, SoundEffects.hf, SoundEffects.hc, SoundEffects.hb, SoundEffects.ha);
+    public static final SoundEffectType b = new SoundEffectType(1.0F, 1.0F, SoundEffects.bZ, SoundEffects.cd, SoundEffects.cc, SoundEffects.cb, SoundEffects.ca);
+    public static final SoundEffectType c = new SoundEffectType(1.0F, 1.0F, SoundEffects.bU, SoundEffects.bY, SoundEffects.bX, SoundEffects.bW, SoundEffects.bV);
+    public static final SoundEffectType d = new SoundEffectType(1.0F, 1.0F, SoundEffects.fZ, SoundEffects.gh, SoundEffects.ge, SoundEffects.gd, SoundEffects.gc);
+    public static final SoundEffectType e = new SoundEffectType(1.0F, 1.5F, SoundEffects.dn, SoundEffects.dt, SoundEffects.dq, SoundEffects.dp, SoundEffects.do);
+    public static final SoundEffectType f = new SoundEffectType(1.0F, 1.0F, SoundEffects.bP, SoundEffects.bT, SoundEffects.bS, SoundEffects.bR, SoundEffects.bQ);
+    public static final SoundEffectType g = new SoundEffectType(1.0F, 1.0F, SoundEffects.ag, SoundEffects.ak, SoundEffects.aj, SoundEffects.ai, SoundEffects.ah);
+    public static final SoundEffectType h = new SoundEffectType(1.0F, 1.0F, SoundEffects.eG, SoundEffects.eK, SoundEffects.eJ, SoundEffects.eI, SoundEffects.eH);
+    public static final SoundEffectType i = new SoundEffectType(1.0F, 1.0F, SoundEffects.fL, SoundEffects.fP, SoundEffects.fO, SoundEffects.fN, SoundEffects.fM);
+    public static final SoundEffectType j = new SoundEffectType(1.0F, 1.0F, SoundEffects.cV, SoundEffects.cZ, SoundEffects.cY, SoundEffects.cX, SoundEffects.cW);
+    public static final SoundEffectType k = new SoundEffectType(0.3F, 1.0F, SoundEffects.b, SoundEffects.h, SoundEffects.g, SoundEffects.e, SoundEffects.d);
+    public static final SoundEffectType l = new SoundEffectType(1.0F, 1.0F, SoundEffects.fq, SoundEffects.fy, SoundEffects.fw, SoundEffects.ft, SoundEffects.fs);
+    public final float m;
+    public final float n;
+    private final SoundEffect o;
+    private final SoundEffect p;
+    private final SoundEffect q;
+    private final SoundEffect r;
+    private final SoundEffect s;
+
+    public SoundEffectType(float f, float f1, SoundEffect soundeffect, SoundEffect soundeffect1, SoundEffect soundeffect2, SoundEffect soundeffect3, SoundEffect soundeffect4) {
+        this.m = f;
+        this.n = f1;
+        this.o = soundeffect;
+        this.p = soundeffect1;
+        this.q = soundeffect2;
+        this.r = soundeffect3;
+        this.s = soundeffect4;
+    }
+
+    public float a() {
+        return this.m;
+    }
+
+    public float b() {
+        return this.n;
+    }
+
+    public SoundEffect d() {
+        return this.p;
+    }
+
+    public SoundEffect e() {
+        return this.q;
+    }
+
+    public SoundEffect g() {
+        return this.s;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SoundEffects.java b/src/main/java/net/minecraft/server/SoundEffects.java
new file mode 100644
index 0000000..2ba91ac
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SoundEffects.java
@@ -0,0 +1,908 @@
+package net.minecraft.server;
+
+public class SoundEffects {
+
+    public static final SoundEffect a;
+    public static final SoundEffect b;
+    public static final SoundEffect c;
+    public static final SoundEffect d;
+    public static final SoundEffect e;
+    public static final SoundEffect f;
+    public static final SoundEffect g;
+    public static final SoundEffect h;
+    public static final SoundEffect i;
+    public static final SoundEffect j;
+    public static final SoundEffect k;
+    public static final SoundEffect l;
+    public static final SoundEffect m;
+    public static final SoundEffect n;
+    public static final SoundEffect o;
+    public static final SoundEffect p;
+    public static final SoundEffect q;
+    public static final SoundEffect r;
+    public static final SoundEffect s;
+    public static final SoundEffect t;
+    public static final SoundEffect u;
+    public static final SoundEffect v;
+    public static final SoundEffect w;
+    public static final SoundEffect x;
+    public static final SoundEffect y;
+    public static final SoundEffect z;
+    public static final SoundEffect A;
+    public static final SoundEffect B;
+    public static final SoundEffect C;
+    public static final SoundEffect D;
+    public static final SoundEffect E;
+    public static final SoundEffect F;
+    public static final SoundEffect G;
+    public static final SoundEffect H;
+    public static final SoundEffect I;
+    public static final SoundEffect J;
+    public static final SoundEffect K;
+    public static final SoundEffect L;
+    public static final SoundEffect M;
+    public static final SoundEffect N;
+    public static final SoundEffect O;
+    public static final SoundEffect P;
+    public static final SoundEffect Q;
+    public static final SoundEffect R;
+    public static final SoundEffect S;
+    public static final SoundEffect T;
+    public static final SoundEffect U;
+    public static final SoundEffect V;
+    public static final SoundEffect W;
+    public static final SoundEffect X;
+    public static final SoundEffect Y;
+    public static final SoundEffect Z;
+    public static final SoundEffect aa;
+    public static final SoundEffect ab;
+    public static final SoundEffect ac;
+    public static final SoundEffect ad;
+    public static final SoundEffect ae;
+    public static final SoundEffect af;
+    public static final SoundEffect ag;
+    public static final SoundEffect ah;
+    public static final SoundEffect ai;
+    public static final SoundEffect aj;
+    public static final SoundEffect ak;
+    public static final SoundEffect al;
+    public static final SoundEffect am;
+    public static final SoundEffect an;
+    public static final SoundEffect ao;
+    public static final SoundEffect ap;
+    public static final SoundEffect aq;
+    public static final SoundEffect ar;
+    public static final SoundEffect as;
+    public static final SoundEffect at;
+    public static final SoundEffect au;
+    public static final SoundEffect av;
+    public static final SoundEffect aw;
+    public static final SoundEffect ax;
+    public static final SoundEffect ay;
+    public static final SoundEffect az;
+    public static final SoundEffect aA;
+    public static final SoundEffect aB;
+    public static final SoundEffect aC;
+    public static final SoundEffect aD;
+    public static final SoundEffect aE;
+    public static final SoundEffect aF;
+    public static final SoundEffect aG;
+    public static final SoundEffect aH;
+    public static final SoundEffect aI;
+    public static final SoundEffect aJ;
+    public static final SoundEffect aK;
+    public static final SoundEffect aL;
+    public static final SoundEffect aM;
+    public static final SoundEffect aN;
+    public static final SoundEffect aO;
+    public static final SoundEffect aP;
+    public static final SoundEffect aQ;
+    public static final SoundEffect aR;
+    public static final SoundEffect aS;
+    public static final SoundEffect aT;
+    public static final SoundEffect aU;
+    public static final SoundEffect aV;
+    public static final SoundEffect aW;
+    public static final SoundEffect aX;
+    public static final SoundEffect aY;
+    public static final SoundEffect aZ;
+    public static final SoundEffect ba;
+    public static final SoundEffect bb;
+    public static final SoundEffect bc;
+    public static final SoundEffect bd;
+    public static final SoundEffect be;
+    public static final SoundEffect bf;
+    public static final SoundEffect bg;
+    public static final SoundEffect bh;
+    public static final SoundEffect bi;
+    public static final SoundEffect bj;
+    public static final SoundEffect bk;
+    public static final SoundEffect bl;
+    public static final SoundEffect bm;
+    public static final SoundEffect bn;
+    public static final SoundEffect bo;
+    public static final SoundEffect bp;
+    public static final SoundEffect bq;
+    public static final SoundEffect br;
+    public static final SoundEffect bs;
+    public static final SoundEffect bt;
+    public static final SoundEffect bu;
+    public static final SoundEffect bv;
+    public static final SoundEffect bw;
+    public static final SoundEffect bx;
+    public static final SoundEffect by;
+    public static final SoundEffect bz;
+    public static final SoundEffect bA;
+    public static final SoundEffect bB;
+    public static final SoundEffect bC;
+    public static final SoundEffect bD;
+    public static final SoundEffect bE;
+    public static final SoundEffect bF;
+    public static final SoundEffect bG;
+    public static final SoundEffect bH;
+    public static final SoundEffect bI;
+    public static final SoundEffect bJ;
+    public static final SoundEffect bK;
+    public static final SoundEffect bL;
+    public static final SoundEffect bM;
+    public static final SoundEffect bN;
+    public static final SoundEffect bO;
+    public static final SoundEffect bP;
+    public static final SoundEffect bQ;
+    public static final SoundEffect bR;
+    public static final SoundEffect bS;
+    public static final SoundEffect bT;
+    public static final SoundEffect bU;
+    public static final SoundEffect bV;
+    public static final SoundEffect bW;
+    public static final SoundEffect bX;
+    public static final SoundEffect bY;
+    public static final SoundEffect bZ;
+    public static final SoundEffect ca;
+    public static final SoundEffect cb;
+    public static final SoundEffect cc;
+    public static final SoundEffect cd;
+    public static final SoundEffect ce;
+    public static final SoundEffect cf;
+    public static final SoundEffect cg;
+    public static final SoundEffect ch;
+    public static final SoundEffect ci;
+    public static final SoundEffect cj;
+    public static final SoundEffect ck;
+    public static final SoundEffect cl;
+    public static final SoundEffect cm;
+    public static final SoundEffect cn;
+    public static final SoundEffect co;
+    public static final SoundEffect cp;
+    public static final SoundEffect cq;
+    public static final SoundEffect cr;
+    public static final SoundEffect cs;
+    public static final SoundEffect ct;
+    public static final SoundEffect cu;
+    public static final SoundEffect cv;
+    public static final SoundEffect cw;
+    public static final SoundEffect cx;
+    public static final SoundEffect cy;
+    public static final SoundEffect cz;
+    public static final SoundEffect cA;
+    public static final SoundEffect cB;
+    public static final SoundEffect cC;
+    public static final SoundEffect cD;
+    public static final SoundEffect cE;
+    public static final SoundEffect cF;
+    public static final SoundEffect cG;
+    public static final SoundEffect cH;
+    public static final SoundEffect cI;
+    public static final SoundEffect cJ;
+    public static final SoundEffect cK;
+    public static final SoundEffect cL;
+    public static final SoundEffect cM;
+    public static final SoundEffect cN;
+    public static final SoundEffect cO;
+    public static final SoundEffect cP;
+    public static final SoundEffect cQ;
+    public static final SoundEffect cR;
+    public static final SoundEffect cS;
+    public static final SoundEffect cT;
+    public static final SoundEffect cU;
+    public static final SoundEffect cV;
+    public static final SoundEffect cW;
+    public static final SoundEffect cX;
+    public static final SoundEffect cY;
+    public static final SoundEffect cZ;
+    public static final SoundEffect da;
+    public static final SoundEffect db;
+    public static final SoundEffect dc;
+    public static final SoundEffect dd;
+    public static final SoundEffect de;
+    public static final SoundEffect df;
+    public static final SoundEffect dg;
+    public static final SoundEffect dh;
+    public static final SoundEffect di;
+    public static final SoundEffect dj;
+    public static final SoundEffect dk;
+    public static final SoundEffect dl;
+    public static final SoundEffect dm;
+    public static final SoundEffect dn;
+    public static final SoundEffect do;
+    public static final SoundEffect dp;
+    public static final SoundEffect dq;
+    public static final SoundEffect BLOCK_METAL_PRESSUREPLATE_CLICK_OFF;
+    public static final SoundEffect ds;
+    public static final SoundEffect dt;
+    public static final SoundEffect du;
+    public static final SoundEffect dv;
+    public static final SoundEffect dw;
+    public static final SoundEffect dx;
+    public static final SoundEffect dy;
+    public static final SoundEffect dz;
+    public static final SoundEffect dA;
+    public static final SoundEffect dB;
+    public static final SoundEffect dC;
+    public static final SoundEffect dD;
+    public static final SoundEffect dE;
+    public static final SoundEffect dF;
+    public static final SoundEffect dG;
+    public static final SoundEffect dH;
+    public static final SoundEffect dI;
+    public static final SoundEffect dJ;
+    public static final SoundEffect dK;
+    public static final SoundEffect dL;
+    public static final SoundEffect dM;
+    public static final SoundEffect dN;
+    public static final SoundEffect dO;
+    public static final SoundEffect dP;
+    public static final SoundEffect dQ;
+    public static final SoundEffect dR;
+    public static final SoundEffect dS;
+    public static final SoundEffect dT;
+    public static final SoundEffect dU;
+    public static final SoundEffect dV;
+    public static final SoundEffect ENTITY_PLAYER_ATTACK_CRIT;
+    public static final SoundEffect dX;
+    public static final SoundEffect dY;
+    public static final SoundEffect dZ;
+    public static final SoundEffect ea;
+    public static final SoundEffect eb;
+    public static final SoundEffect ec;
+    public static final SoundEffect ed;
+    public static final SoundEffect ee;
+    public static final SoundEffect ef;
+    public static final SoundEffect ENTITY_PLAYER_HURT;
+    public static final SoundEffect eh;
+    public static final SoundEffect ei;
+    public static final SoundEffect ej;
+    public static final SoundEffect ek;
+    public static final SoundEffect el;
+    public static final SoundEffect em;
+    public static final SoundEffect en;
+    public static final SoundEffect eo;
+    public static final SoundEffect ep;
+    public static final SoundEffect eq;
+    public static final SoundEffect er;
+    public static final SoundEffect es;
+    public static final SoundEffect et;
+    public static final SoundEffect eu;
+    public static final SoundEffect ev;
+    public static final SoundEffect ew;
+    public static final SoundEffect ex;
+    public static final SoundEffect ey;
+    public static final SoundEffect ez;
+    public static final SoundEffect eA;
+    public static final SoundEffect eB;
+    public static final SoundEffect eC;
+    public static final SoundEffect eD;
+    public static final SoundEffect eE;
+    public static final SoundEffect eF;
+    public static final SoundEffect eG;
+    public static final SoundEffect eH;
+    public static final SoundEffect eI;
+    public static final SoundEffect eJ;
+    public static final SoundEffect eK;
+    public static final SoundEffect eL;
+    public static final SoundEffect eM;
+    public static final SoundEffect eN;
+    public static final SoundEffect eO;
+    public static final SoundEffect eP;
+    public static final SoundEffect eQ;
+    public static final SoundEffect eR;
+    public static final SoundEffect eS;
+    public static final SoundEffect eT;
+    public static final SoundEffect eU;
+    public static final SoundEffect eV;
+    public static final SoundEffect eW;
+    public static final SoundEffect eX;
+    public static final SoundEffect eY;
+    public static final SoundEffect eZ;
+    public static final SoundEffect fa;
+    public static final SoundEffect fb;
+    public static final SoundEffect fc;
+    public static final SoundEffect fd;
+    public static final SoundEffect fe;
+    public static final SoundEffect ff;
+    public static final SoundEffect fg;
+    public static final SoundEffect fh;
+    public static final SoundEffect fi;
+    public static final SoundEffect fj;
+    public static final SoundEffect fk;
+    public static final SoundEffect fl;
+    public static final SoundEffect fm;
+    public static final SoundEffect fn;
+    public static final SoundEffect fo;
+    public static final SoundEffect fp;
+    public static final SoundEffect fq;
+    public static final SoundEffect fr;
+    public static final SoundEffect fs;
+    public static final SoundEffect ft;
+    public static final SoundEffect fu;
+    public static final SoundEffect fv;
+    public static final SoundEffect fw;
+    public static final SoundEffect fx;
+    public static final SoundEffect fy;
+    public static final SoundEffect fz;
+    public static final SoundEffect fA;
+    public static final SoundEffect fB;
+    public static final SoundEffect fC;
+    public static final SoundEffect fD;
+    public static final SoundEffect fE;
+    public static final SoundEffect fF;
+    public static final SoundEffect fG;
+    public static final SoundEffect fH;
+    public static final SoundEffect fI;
+    public static final SoundEffect fJ;
+    public static final SoundEffect fK;
+    public static final SoundEffect fL;
+    public static final SoundEffect fM;
+    public static final SoundEffect fN;
+    public static final SoundEffect fO;
+    public static final SoundEffect fP;
+    public static final SoundEffect fQ;
+    public static final SoundEffect fR;
+    public static final SoundEffect fS;
+    public static final SoundEffect fT;
+    public static final SoundEffect fU;
+    public static final SoundEffect fV;
+    public static final SoundEffect fW;
+    public static final SoundEffect fX;
+    public static final SoundEffect fY;
+    public static final SoundEffect fZ;
+    public static final SoundEffect ga;
+    public static final SoundEffect gb;
+    public static final SoundEffect gc;
+    public static final SoundEffect gd;
+    public static final SoundEffect ge;
+    public static final SoundEffect gf;
+    public static final SoundEffect gg;
+    public static final SoundEffect gh;
+    public static final SoundEffect gi;
+    public static final SoundEffect gj;
+    public static final SoundEffect gk;
+    public static final SoundEffect gl;
+    public static final SoundEffect gm;
+    public static final SoundEffect gn;
+    public static final SoundEffect go;
+    public static final SoundEffect gp;
+    public static final SoundEffect gq;
+    public static final SoundEffect gr;
+    public static final SoundEffect gs;
+    public static final SoundEffect gt;
+    public static final SoundEffect gu;
+    public static final SoundEffect gv;
+    public static final SoundEffect gw;
+    public static final SoundEffect gx;
+    public static final SoundEffect gy;
+    public static final SoundEffect gz;
+    public static final SoundEffect gA;
+    public static final SoundEffect gB;
+    public static final SoundEffect gC;
+    public static final SoundEffect gD;
+    public static final SoundEffect gE;
+    public static final SoundEffect gF;
+    public static final SoundEffect gG;
+    public static final SoundEffect gH;
+    public static final SoundEffect gI;
+    public static final SoundEffect gJ;
+    public static final SoundEffect gK;
+    public static final SoundEffect gL;
+    public static final SoundEffect gM;
+    public static final SoundEffect gN;
+    public static final SoundEffect gO;
+    public static final SoundEffect gP;
+    public static final SoundEffect gQ;
+    public static final SoundEffect gR;
+    public static final SoundEffect gS;
+    public static final SoundEffect gT;
+    public static final SoundEffect gU;
+    public static final SoundEffect gV;
+    public static final SoundEffect gW;
+    public static final SoundEffect gX;
+    public static final SoundEffect gY;
+    public static final SoundEffect gZ;
+    public static final SoundEffect ha;
+    public static final SoundEffect hb;
+    public static final SoundEffect hc;
+    public static final SoundEffect hd;
+    public static final SoundEffect he;
+    public static final SoundEffect hf;
+    public static final SoundEffect hg;
+    public static final SoundEffect hh;
+    public static final SoundEffect hi;
+    public static final SoundEffect hj;
+    public static final SoundEffect hk;
+    public static final SoundEffect hl;
+    public static final SoundEffect hm;
+    public static final SoundEffect hn;
+    public static final SoundEffect ho;
+    public static final SoundEffect hp;
+    public static final SoundEffect hq;
+    public static final SoundEffect hr;
+    public static final SoundEffect hs;
+    public static final SoundEffect ht;
+    public static final SoundEffect hu;
+    public static final SoundEffect hv;
+    public static final SoundEffect hw;
+    public static final SoundEffect hx;
+    public static final SoundEffect hy;
+    public static final SoundEffect hz;
+    public static final SoundEffect hA;
+
+    private static SoundEffect a(String s) {
+        SoundEffect soundeffect = (SoundEffect) SoundEffect.a.get(new MinecraftKey(s));
+
+        if (soundeffect == null) {
+            throw new IllegalStateException("Invalid Sound requested: " + s);
+        } else {
+            return soundeffect;
+        }
+    }
+
+    static {
+        if (!DispenserRegistry.a()) {
+            throw new RuntimeException("Accessed Sounds before Bootstrap!");
+        } else {
+            a = a("ambient.cave");
+            b = a("block.anvil.break");
+            c = a("block.anvil.destroy");
+            d = a("block.anvil.fall");
+            e = a("block.anvil.hit");
+            f = a("block.anvil.land");
+            g = a("block.anvil.place");
+            h = a("block.anvil.step");
+            i = a("block.anvil.use");
+            j = a("entity.armorstand.break");
+            k = a("entity.armorstand.fall");
+            l = a("entity.armorstand.hit");
+            m = a("entity.armorstand.place");
+            n = a("item.armor.equip_chain");
+            o = a("item.armor.equip_diamond");
+            p = a("item.armor.equip_generic");
+            q = a("item.armor.equip_gold");
+            r = a("item.armor.equip_iron");
+            s = a("item.armor.equip_leather");
+            t = a("entity.arrow.hit");
+            u = a("entity.arrow.hit_player");
+            v = a("entity.arrow.shoot");
+            w = a("entity.bat.ambient");
+            x = a("entity.bat.death");
+            y = a("entity.bat.hurt");
+            z = a("entity.bat.loop");
+            A = a("entity.bat.takeoff");
+            B = a("entity.blaze.ambient");
+            C = a("entity.blaze.burn");
+            D = a("entity.blaze.death");
+            E = a("entity.blaze.hurt");
+            F = a("entity.blaze.shoot");
+            G = a("entity.bobber.splash");
+            H = a("entity.bobber.throw");
+            I = a("item.bottle.fill");
+            J = a("item.bottle.fill_dragonbreath");
+            K = a("block.brewing_stand.brew");
+            L = a("item.bucket.empty");
+            M = a("item.bucket.empty_lava");
+            N = a("item.bucket.fill");
+            O = a("item.bucket.fill_lava");
+            P = a("entity.cat.ambient");
+            Q = a("entity.cat.death");
+            R = a("entity.cat.hiss");
+            S = a("entity.cat.hurt");
+            T = a("entity.cat.purr");
+            U = a("entity.cat.purreow");
+            V = a("block.chest.close");
+            W = a("block.chest.locked");
+            X = a("block.chest.open");
+            Y = a("entity.chicken.ambient");
+            Z = a("entity.chicken.death");
+            aa = a("entity.chicken.egg");
+            ab = a("entity.chicken.hurt");
+            ac = a("entity.chicken.step");
+            ad = a("block.chorus_flower.death");
+            ae = a("block.chorus_flower.grow");
+            af = a("item.chorus_fruit.teleport");
+            ag = a("block.cloth.break");
+            ah = a("block.cloth.fall");
+            ai = a("block.cloth.hit");
+            aj = a("block.cloth.place");
+            ak = a("block.cloth.step");
+            al = a("block.comparator.click");
+            am = a("entity.cow.ambient");
+            an = a("entity.cow.death");
+            ao = a("entity.cow.hurt");
+            ap = a("entity.cow.milk");
+            aq = a("entity.cow.step");
+            ar = a("entity.creeper.death");
+            as = a("entity.creeper.hurt");
+            at = a("entity.creeper.primed");
+            au = a("block.dispenser.dispense");
+            av = a("block.dispenser.fail");
+            aw = a("block.dispenser.launch");
+            ax = a("entity.donkey.ambient");
+            ay = a("entity.donkey.angry");
+            az = a("entity.donkey.chest");
+            aA = a("entity.donkey.death");
+            aB = a("entity.donkey.hurt");
+            aC = a("entity.egg.throw");
+            aD = a("entity.elder_guardian.ambient");
+            aE = a("entity.elder_guardian.ambient_land");
+            aF = a("entity.elder_guardian.curse");
+            aG = a("entity.elder_guardian.death");
+            aH = a("entity.elder_guardian.death_land");
+            aI = a("entity.elder_guardian.hurt");
+            aJ = a("entity.elder_guardian.hurt_land");
+            aK = a("block.enderchest.close");
+            aL = a("block.enderchest.open");
+            aM = a("entity.enderdragon.ambient");
+            aN = a("entity.enderdragon.death");
+            aO = a("entity.enderdragon_fireball.explode");
+            aP = a("entity.enderdragon.flap");
+            aQ = a("entity.enderdragon.growl");
+            aR = a("entity.enderdragon.hurt");
+            aS = a("entity.enderdragon.shoot");
+            aT = a("entity.endereye.launch");
+            aU = a("entity.endermen.ambient");
+            aV = a("entity.endermen.death");
+            aW = a("entity.endermen.hurt");
+            aX = a("entity.endermen.scream");
+            aY = a("entity.endermen.stare");
+            aZ = a("entity.endermen.teleport");
+            ba = a("entity.endermite.ambient");
+            bb = a("entity.endermite.death");
+            bc = a("entity.endermite.hurt");
+            bd = a("entity.endermite.step");
+            be = a("entity.enderpearl.throw");
+            bf = a("block.end_gateway.spawn");
+            bg = a("entity.experience_bottle.throw");
+            bh = a("entity.experience_orb.pickup");
+            bi = a("entity.experience_orb.touch");
+            bj = a("block.fence_gate.close");
+            bk = a("block.fence_gate.open");
+            bl = a("item.firecharge.use");
+            bm = a("entity.firework.blast");
+            bn = a("entity.firework.blast_far");
+            bo = a("entity.firework.large_blast");
+            bp = a("entity.firework.large_blast_far");
+            bq = a("entity.firework.launch");
+            br = a("entity.firework.shoot");
+            bs = a("entity.firework.twinkle");
+            bt = a("entity.firework.twinkle_far");
+            bu = a("block.fire.ambient");
+            bv = a("block.fire.extinguish");
+            bw = a("item.flintandsteel.use");
+            bx = a("block.furnace.fire_crackle");
+            by = a("entity.generic.big_fall");
+            bz = a("entity.generic.burn");
+            bA = a("entity.generic.death");
+            bB = a("entity.generic.drink");
+            bC = a("entity.generic.eat");
+            bD = a("entity.generic.explode");
+            bE = a("entity.generic.extinguish_fire");
+            bF = a("entity.generic.hurt");
+            bG = a("entity.generic.small_fall");
+            bH = a("entity.generic.splash");
+            bI = a("entity.generic.swim");
+            bJ = a("entity.ghast.ambient");
+            bK = a("entity.ghast.death");
+            bL = a("entity.ghast.hurt");
+            bM = a("entity.ghast.scream");
+            bN = a("entity.ghast.shoot");
+            bO = a("entity.ghast.warn");
+            bP = a("block.glass.break");
+            bQ = a("block.glass.fall");
+            bR = a("block.glass.hit");
+            bS = a("block.glass.place");
+            bT = a("block.glass.step");
+            bU = a("block.grass.break");
+            bV = a("block.grass.fall");
+            bW = a("block.grass.hit");
+            bX = a("block.grass.place");
+            bY = a("block.grass.step");
+            bZ = a("block.gravel.break");
+            ca = a("block.gravel.fall");
+            cb = a("block.gravel.hit");
+            cc = a("block.gravel.place");
+            cd = a("block.gravel.step");
+            ce = a("entity.guardian.ambient");
+            cf = a("entity.guardian.ambient_land");
+            cg = a("entity.guardian.attack");
+            ch = a("entity.guardian.death");
+            ci = a("entity.guardian.death_land");
+            cj = a("entity.guardian.flop");
+            ck = a("entity.guardian.hurt");
+            cl = a("entity.guardian.hurt_land");
+            cm = a("item.hoe.till");
+            cn = a("entity.horse.ambient");
+            co = a("entity.horse.angry");
+            cp = a("entity.horse.armor");
+            cq = a("entity.horse.breathe");
+            cr = a("entity.horse.death");
+            cs = a("entity.horse.eat");
+            ct = a("entity.horse.gallop");
+            cu = a("entity.horse.hurt");
+            cv = a("entity.horse.jump");
+            cw = a("entity.horse.land");
+            cx = a("entity.horse.saddle");
+            cy = a("entity.horse.step");
+            cz = a("entity.horse.step_wood");
+            cA = a("entity.hostile.big_fall");
+            cB = a("entity.hostile.death");
+            cC = a("entity.hostile.hurt");
+            cD = a("entity.hostile.small_fall");
+            cE = a("entity.hostile.splash");
+            cF = a("entity.hostile.swim");
+            cG = a("entity.irongolem.attack");
+            cH = a("entity.irongolem.death");
+            cI = a("entity.irongolem.hurt");
+            cJ = a("entity.irongolem.step");
+            cK = a("block.iron_door.close");
+            cL = a("block.iron_door.open");
+            cM = a("block.iron_trapdoor.close");
+            cN = a("block.iron_trapdoor.open");
+            cO = a("entity.itemframe.add_item");
+            cP = a("entity.itemframe.break");
+            cQ = a("entity.itemframe.place");
+            cR = a("entity.itemframe.remove_item");
+            cS = a("entity.itemframe.rotate_item");
+            cT = a("entity.item.break");
+            cU = a("entity.item.pickup");
+            cV = a("block.ladder.break");
+            cW = a("block.ladder.fall");
+            cX = a("block.ladder.hit");
+            cY = a("block.ladder.place");
+            cZ = a("block.ladder.step");
+            da = a("block.lava.ambient");
+            db = a("block.lava.extinguish");
+            dc = a("block.lava.pop");
+            dd = a("entity.leashknot.break");
+            de = a("entity.leashknot.place");
+            df = a("block.lever.click");
+            dg = a("entity.lightning.impact");
+            dh = a("entity.lightning.thunder");
+            di = a("entity.lingeringpotion.throw");
+            dj = a("entity.magmacube.death");
+            dk = a("entity.magmacube.hurt");
+            dl = a("entity.magmacube.jump");
+            dm = a("entity.magmacube.squish");
+            dn = a("block.metal.break");
+            do = a("block.metal.fall");
+            dp = a("block.metal.hit");
+            dq = a("block.metal.place");
+            BLOCK_METAL_PRESSUREPLATE_CLICK_OFF = a("block.metal_pressureplate.click_off");
+            ds = a("block.metal_pressureplate.click_on");
+            dt = a("block.metal.step");
+            du = a("entity.minecart.inside");
+            dv = a("entity.minecart.riding");
+            dw = a("entity.mooshroom.shear");
+            dx = a("entity.mule.ambient");
+            dy = a("entity.mule.death");
+            dz = a("entity.mule.hurt");
+            dA = a("music.creative");
+            dB = a("music.credits");
+            dC = a("music.dragon");
+            dD = a("music.end");
+            dE = a("music.game");
+            dF = a("music.menu");
+            dG = a("music.nether");
+            dH = a("block.note.basedrum");
+            dI = a("block.note.bass");
+            dJ = a("block.note.harp");
+            dK = a("block.note.hat");
+            dL = a("block.note.pling");
+            dM = a("block.note.snare");
+            dN = a("entity.painting.break");
+            dO = a("entity.painting.place");
+            dP = a("entity.pig.ambient");
+            dQ = a("entity.pig.death");
+            dR = a("entity.pig.hurt");
+            dS = a("entity.pig.saddle");
+            dT = a("entity.pig.step");
+            dU = a("block.piston.contract");
+            dV = a("block.piston.extend");
+            ENTITY_PLAYER_ATTACK_CRIT = a("entity.player.attack.crit");
+            dX = a("entity.player.attack.knockback");
+            dY = a("entity.player.attack.nodamage");
+            dZ = a("entity.player.attack.strong");
+            ea = a("entity.player.attack.sweep");
+            eb = a("entity.player.attack.weak");
+            ec = a("entity.player.big_fall");
+            ed = a("entity.player.breath");
+            ee = a("entity.player.burp");
+            ef = a("entity.player.death");
+            ENTITY_PLAYER_HURT = a("entity.player.hurt");
+            eh = a("entity.player.levelup");
+            ei = a("entity.player.small_fall");
+            ej = a("entity.player.splash");
+            ek = a("entity.player.swim");
+            el = a("block.portal.ambient");
+            em = a("block.portal.travel");
+            en = a("block.portal.trigger");
+            eo = a("entity.rabbit.ambient");
+            ep = a("entity.rabbit.attack");
+            eq = a("entity.rabbit.death");
+            er = a("entity.rabbit.hurt");
+            es = a("entity.rabbit.jump");
+            et = a("record.11");
+            eu = a("record.13");
+            ev = a("record.blocks");
+            ew = a("record.cat");
+            ex = a("record.chirp");
+            ey = a("record.far");
+            ez = a("record.mall");
+            eA = a("record.mellohi");
+            eB = a("record.stal");
+            eC = a("record.strad");
+            eD = a("record.wait");
+            eE = a("record.ward");
+            eF = a("block.redstone_torch.burnout");
+            eG = a("block.sand.break");
+            eH = a("block.sand.fall");
+            eI = a("block.sand.hit");
+            eJ = a("block.sand.place");
+            eK = a("block.sand.step");
+            eL = a("entity.sheep.ambient");
+            eM = a("entity.sheep.death");
+            eN = a("entity.sheep.hurt");
+            eO = a("entity.sheep.shear");
+            eP = a("entity.sheep.step");
+            eQ = a("item.shield.block");
+            eR = a("item.shield.break");
+            eS = a("item.shovel.flatten");
+            eT = a("entity.shulker.ambient");
+            eU = a("entity.shulker_bullet.hit");
+            eV = a("entity.shulker_bullet.hurt");
+            eW = a("entity.shulker.close");
+            eX = a("entity.shulker.death");
+            eY = a("entity.shulker.hurt");
+            eZ = a("entity.shulker.hurt_closed");
+            fa = a("entity.shulker.open");
+            fb = a("entity.shulker.shoot");
+            fc = a("entity.shulker.teleport");
+            fd = a("entity.silverfish.ambient");
+            fe = a("entity.silverfish.death");
+            ff = a("entity.silverfish.hurt");
+            fg = a("entity.silverfish.step");
+            fh = a("entity.skeleton.ambient");
+            fi = a("entity.skeleton.death");
+            fj = a("entity.skeleton_horse.ambient");
+            fk = a("entity.skeleton_horse.death");
+            fl = a("entity.skeleton_horse.hurt");
+            fm = a("entity.skeleton.hurt");
+            fn = a("entity.skeleton.shoot");
+            fo = a("entity.skeleton.step");
+            fp = a("entity.slime.attack");
+            fq = a("block.slime.break");
+            fr = a("entity.slime.death");
+            fs = a("block.slime.fall");
+            ft = a("block.slime.hit");
+            fu = a("entity.slime.hurt");
+            fv = a("entity.slime.jump");
+            fw = a("block.slime.place");
+            fx = a("entity.slime.squish");
+            fy = a("block.slime.step");
+            fz = a("entity.small_magmacube.death");
+            fA = a("entity.small_magmacube.hurt");
+            fB = a("entity.small_magmacube.squish");
+            fC = a("entity.small_slime.death");
+            fD = a("entity.small_slime.hurt");
+            fE = a("entity.small_slime.jump");
+            fF = a("entity.small_slime.squish");
+            fG = a("entity.snowball.throw");
+            fH = a("entity.snowman.ambient");
+            fI = a("entity.snowman.death");
+            fJ = a("entity.snowman.hurt");
+            fK = a("entity.snowman.shoot");
+            fL = a("block.snow.break");
+            fM = a("block.snow.fall");
+            fN = a("block.snow.hit");
+            fO = a("block.snow.place");
+            fP = a("block.snow.step");
+            fQ = a("entity.spider.ambient");
+            fR = a("entity.spider.death");
+            fS = a("entity.spider.hurt");
+            fT = a("entity.spider.step");
+            fU = a("entity.splash_potion.break");
+            fV = a("entity.splash_potion.throw");
+            fW = a("entity.squid.ambient");
+            fX = a("entity.squid.death");
+            fY = a("entity.squid.hurt");
+            fZ = a("block.stone.break");
+            ga = a("block.stone_button.click_off");
+            gb = a("block.stone_button.click_on");
+            gc = a("block.stone.fall");
+            gd = a("block.stone.hit");
+            ge = a("block.stone.place");
+            gf = a("block.stone_pressureplate.click_off");
+            gg = a("block.stone_pressureplate.click_on");
+            gh = a("block.stone.step");
+            gi = a("enchant.thorns.hit");
+            gj = a("entity.tnt.primed");
+            gk = a("block.tripwire.attach");
+            gl = a("block.tripwire.click_off");
+            gm = a("block.tripwire.click_on");
+            gn = a("block.tripwire.detach");
+            go = a("ui.button.click");
+            gp = a("entity.villager.ambient");
+            gq = a("entity.villager.death");
+            gr = a("entity.villager.hurt");
+            gs = a("entity.villager.no");
+            gt = a("entity.villager.trading");
+            gu = a("entity.villager.yes");
+            gv = a("block.waterlily.place");
+            gw = a("block.water.ambient");
+            gx = a("weather.rain");
+            gy = a("weather.rain.above");
+            gz = a("entity.witch.ambient");
+            gA = a("entity.witch.death");
+            gB = a("entity.witch.drink");
+            gC = a("entity.witch.hurt");
+            gD = a("entity.witch.throw");
+            gE = a("entity.wither.ambient");
+            gF = a("entity.wither.break_block");
+            gG = a("entity.wither.death");
+            gH = a("entity.wither.hurt");
+            gI = a("entity.wither.shoot");
+            gJ = a("entity.wither.spawn");
+            gK = a("entity.wolf.ambient");
+            gL = a("entity.wolf.death");
+            gM = a("entity.wolf.growl");
+            gN = a("entity.wolf.howl");
+            gO = a("entity.wolf.hurt");
+            gP = a("entity.wolf.pant");
+            gQ = a("entity.wolf.shake");
+            gR = a("entity.wolf.step");
+            gS = a("entity.wolf.whine");
+            gT = a("block.wooden_door.close");
+            gU = a("block.wooden_door.open");
+            gV = a("block.wooden_trapdoor.close");
+            gW = a("block.wooden_trapdoor.open");
+            gX = a("block.wood.break");
+            gY = a("block.wood_button.click_off");
+            gZ = a("block.wood_button.click_on");
+            ha = a("block.wood.fall");
+            hb = a("block.wood.hit");
+            hc = a("block.wood.place");
+            hd = a("block.wood_pressureplate.click_off");
+            he = a("block.wood_pressureplate.click_on");
+            hf = a("block.wood.step");
+            hg = a("entity.zombie.ambient");
+            hh = a("entity.zombie.attack_door_wood");
+            hi = a("entity.zombie.attack_iron_door");
+            hj = a("entity.zombie.break_door_wood");
+            hk = a("entity.zombie.death");
+            hl = a("entity.zombie_horse.ambient");
+            hm = a("entity.zombie_horse.death");
+            hn = a("entity.zombie_horse.hurt");
+            ho = a("entity.zombie.hurt");
+            hp = a("entity.zombie.infect");
+            hq = a("entity.zombie_pig.ambient");
+            hr = a("entity.zombie_pig.angry");
+            hs = a("entity.zombie_pig.death");
+            ht = a("entity.zombie_pig.hurt");
+            hu = a("entity.zombie.step");
+            hv = a("entity.zombie_villager.ambient");
+            hw = a("entity.zombie_villager.converted");
+            hx = a("entity.zombie_villager.cure");
+            hy = a("entity.zombie_villager.death");
+            hz = a("entity.zombie_villager.hurt");
+            hA = a("entity.zombie_villager.step");
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WhiteList.java b/src/main/java/net/minecraft/server/WhiteList.java
new file mode 100644
index 0000000..85085d5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WhiteList.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class WhiteList extends JsonList<GameProfile, WhiteListEntry> {
+
+    public WhiteList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry<GameProfile> a(JsonObject jsonobject) {
+        return new WhiteListEntry(jsonobject);
+    }
+
+    public boolean isWhitelisted(GameProfile gameprofile) {
+        return this.d(gameprofile);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        WhiteListEntry whitelistentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) whitelistentry.getKey()).getName()) {
+            whitelistentry = (WhiteListEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    protected String b(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        WhiteListEntry whitelistentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            whitelistentry = (WhiteListEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) whitelistentry.getKey()).getName()));
+
+        return (GameProfile) whitelistentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.b((GameProfile) object);
+    }
+}
-- 
1.9.0

