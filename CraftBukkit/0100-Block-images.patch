From b1e07a3f3f0e9725ede7abec7273b9c94cf02133 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Wed, 1 Jul 2015 12:42:37 -0400
Subject: [PATCH] Block images


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index e247854..3504338 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -36,6 +36,7 @@ import org.bukkit.Warning.WarningState;
 import org.bukkit.World;
 import org.bukkit.World.Environment;
 import org.bukkit.WorldCreator;
+import org.bukkit.block.RegionFactory;
 import org.bukkit.boss.BarColor;
 import org.bukkit.boss.BarFlag;
 import org.bukkit.boss.BarStyle;
@@ -50,6 +51,7 @@ import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.conversations.Conversable;
+import org.bukkit.craftbukkit.block.CraftRegionFactory;
 import org.bukkit.craftbukkit.boss.CraftBossBar;
 import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
@@ -1670,6 +1672,11 @@ public final class CraftServer implements Server {
     }
 
     @Override
+    public RegionFactory getRegionFactory() {
+        return CraftRegionFactory.instance();
+    }
+
+    @Override
     public CraftScoreboardManager getScoreboardManager() {
         return scoreboardManager;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 5b2f693..85e7798 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -30,8 +30,12 @@ import org.bukkit.WorldBorder;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
+import org.bukkit.block.BlockImage;
+import org.bukkit.block.BlockRegion;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.CraftBlockPosition;
+import org.bukkit.craftbukkit.block.CraftBlockImage;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.entity.*;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -1570,4 +1574,19 @@ public class CraftWorld implements World {
             cps.queueUnload(chunk.locX, chunk.locZ);
         }
     }
+
+    @Override
+    public BlockImage copyBlocks(BlockRegion region, boolean includeAir, boolean clearSource) {
+        return new CraftBlockImage(this, region, includeAir, clearSource);
+    }
+
+    @Override
+    public int pasteBlocks(BlockImage image, org.bukkit.block.BlockPosition offset) {
+        return ((CraftBlockImage) image).write(this, offset);
+    }
+
+    @Override
+    public int pasteBlocks(BlockImage image) {
+        return pasteBlocks(image, CraftBlockPosition.zero());
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockImage.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockImage.java
new file mode 100644
index 0000000..9a720e3
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockImage.java
@@ -0,0 +1,228 @@
+package org.bukkit.craftbukkit.block;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+
+import com.google.common.collect.Iterables;
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.Blocks;
+import net.minecraft.server.IBlockData;
+import net.minecraft.server.IInventory;
+import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.NextTickListEntry;
+import net.minecraft.server.StructureBoundingBox;
+import net.minecraft.server.TileEntity;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.block.BlockImage;
+import org.bukkit.block.BlockPositionIterator;
+import org.bukkit.block.BlockRegion;
+import org.bukkit.craftbukkit.CraftWorld;
+
+/**
+ * Read/write algorithms are derived from the code for the /clone command,
+ * which can be found in {@link net.minecraft.server.CommandClone}.
+ */
+public class CraftBlockImage implements BlockImage {
+
+    static class BlockRecord extends CraftBlockPosition {
+        final IBlockData blockData;
+        final NBTTagCompound tileEntityData;
+
+        public BlockRecord(org.bukkit.block.BlockPosition pos, IBlockData blockData, NBTTagCompound tileEntityData) {
+            super(pos.getBlockX(), pos.getBlockY(), pos.getBlockZ());
+            this.blockData = blockData;
+            this.tileEntityData = tileEntityData;
+        }
+    }
+
+    private final UUID worldId;
+
+    private final Set<BlockPosition> blockSet = new HashSet<BlockPosition>();
+    private final List<BlockRecord> earlyBlocks = new ArrayList<BlockRecord>();
+    private final List<BlockRecord> tileEntities = new ArrayList<BlockRecord>();
+    private final List<BlockRecord> lateBlocks = new ArrayList<BlockRecord>();
+
+    private long tickTime;
+    private final List<NextTickListEntry> tickListEntries = new ArrayList<NextTickListEntry>();
+
+    public CraftBlockImage(CraftWorld world, BlockRegion region, boolean includeAir, boolean clearSource) {
+        this.worldId = world.getUID();
+        read(world, region, includeAir, clearSource);
+    }
+
+    private void read(CraftWorld craftWorld, BlockRegion region, boolean includeAir, boolean clearSource) {
+        net.minecraft.server.WorldServer world = craftWorld.getHandle();
+
+        for(org.bukkit.block.BlockPosition position : region) {
+            // Avoid creating any objects for air blocks, as long as the region
+            // iterator is spitting out NMS BlockPositions.
+            BlockPosition nmsPosition = CraftBlockPosition.nms(position);
+            IBlockData blockData = world.getType(nmsPosition);
+
+            if(includeAir || blockData.getBlock() != Blocks.AIR) {
+                BlockRecord block;
+
+                TileEntity tileEntity = world.getTileEntity(nmsPosition);
+                if(tileEntity != null) {
+                    block = new BlockRecord(position, blockData, new NBTTagCompound());
+                    tileEntity.save(block.tileEntityData);
+                    tileEntities.add(block);
+
+                    if(clearSource && tileEntity instanceof IInventory) {
+                        ((IInventory) tileEntity).l(); // Clear inventory
+                    }
+                } else {
+                    block = new BlockRecord(position, blockData, null);
+                    if (!block.blockData.b() && // flammable
+                        !block.blockData.h()) { // full-sized
+                        lateBlocks.add(block);
+                    } else {
+                        earlyBlocks.add(block);
+                    }
+                }
+
+                blockSet.add(block);
+            }
+        }
+
+        if(clearSource) {
+            Iterable<BlockRecord> clearPositions = Iterables.concat(lateBlocks, tileEntities, earlyBlocks);
+
+            for(BlockRecord block : clearPositions) {
+                if(block.tileEntityData != null) {
+                    TileEntity tileEntity = world.getTileEntity(block);
+                    if(tileEntity instanceof IInventory) {
+                        ((IInventory) tileEntity).l();
+                    }
+                }
+                world.setTypeAndData(block, Blocks.BARRIER.getBlockData(), 2);
+            }
+
+            for(BlockRecord block : clearPositions) {
+                world.setTypeAndData(block, Blocks.AIR.getBlockData(), 3);
+            }
+        }
+
+        this.tickTime = world.getWorldData().getTime();
+
+        List<NextTickListEntry> ticks = world.a(new StructureBoundingBox(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE), false);
+        if(ticks != null) {
+            for(NextTickListEntry tick : ticks) {
+                if(blockSet.contains(tick.a)) {
+                    tickListEntries.add(tick);
+                }
+            }
+        }
+    }
+
+    public int write(CraftWorld craftWorld, org.bukkit.block.BlockPosition offset) {
+        net.minecraft.server.WorldServer world = craftWorld.getHandle();
+        BlockPosition delta = CraftBlockPosition.nms(offset);
+
+        Iterable<BlockRecord> allBlocks = Iterables.concat(earlyBlocks, tileEntities, lateBlocks);
+        Iterable<BlockRecord> reversedBlocks = Iterables.concat(lateBlocks, tileEntities, earlyBlocks);
+
+        for(BlockRecord block : reversedBlocks) {
+            BlockPosition destPos = block.a(delta);
+            TileEntity tileEntity = world.getTileEntity(destPos);
+            if (tileEntity instanceof IInventory) {
+                ((IInventory) tileEntity).l(); // Clear inventory
+            }
+            world.setTypeAndData(destPos, Blocks.BARRIER.getBlockData(), 2);
+        }
+
+        int affectedBlocks = 0;
+
+        for(BlockRecord block : allBlocks) {
+            if(world.setTypeAndData(block.a(delta), block.blockData, 2)) {
+                ++affectedBlocks;
+            }
+        }
+
+        for(BlockRecord block : tileEntities) {
+            BlockPosition destPos = block.a(delta);
+            TileEntity tileEntity = world.getTileEntity(destPos);
+
+            if(block.tileEntityData != null && tileEntity != null) {
+                block.tileEntityData.setInt("x", destPos.getX());
+                block.tileEntityData.setInt("y", destPos.getY());
+                block.tileEntityData.setInt("z", destPos.getZ());
+
+                tileEntity.a(block.tileEntityData);
+                tileEntity.update();
+            }
+
+            world.setTypeAndData(destPos, block.blockData, 2);
+        }
+
+        for(BlockRecord block : reversedBlocks) {
+            world.update(block.a(delta), block.blockData.getBlock());
+        }
+
+        if(tickListEntries != null) {
+            for(NextTickListEntry entry : tickListEntries) {
+                world.b(entry.a.a(delta), entry.a(), (int) (entry.b - tickTime), entry.c);
+            }
+        }
+
+        return affectedBlocks;
+    }
+
+    @Override
+    public UUID getWorldId() {
+        return worldId;
+    }
+
+    @Override
+    public World getWorld() {
+        return Bukkit.getWorld(getWorldId());
+    }
+
+    @Override
+    public BlockRegion getRegion() {
+        return new Region();
+    }
+
+    class Region implements BlockRegion {
+        @Override
+        public boolean contains(org.bukkit.block.BlockPosition position) {
+            if(position instanceof BlockPosition) {
+                return blockSet.contains(position);
+            } else {
+                return blockSet.contains(new BlockPosition(position.getBlockX(), position.getBlockY(), position.getBlockZ()));
+            }
+        }
+
+        @Override
+        public BlockPositionIterator iterator() {
+            return new Iterator();
+        }
+
+        class Iterator extends CraftMutableBlockPosition implements BlockPositionIterator {
+            private final java.util.Iterator<BlockPosition> iter = blockSet.iterator();
+
+            @Override
+            public boolean hasNext() {
+                return iter.hasNext();
+            }
+
+            @Override
+            public org.bukkit.block.BlockPosition next() {
+                BlockPosition position = iter.next();
+                set(position.getX(),
+                    position.getY(),
+                    position.getZ());
+                return this;
+            }
+
+            @Override
+            public void remove() {
+                throw new UnsupportedOperationException();
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockPosition.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockPosition.java
new file mode 100644
index 0000000..76d45ed
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockPosition.java
@@ -0,0 +1,71 @@
+package org.bukkit.craftbukkit.block;
+
+import net.minecraft.server.BaseBlockPosition;
+import org.bukkit.block.BlockPosition;
+
+public class CraftBlockPosition extends net.minecraft.server.BlockPosition implements org.bukkit.block.BlockPosition {
+
+    public CraftBlockPosition(int x, int y, int z) {
+        super(x, y, z);
+    }
+
+    public CraftBlockPosition(BlockPosition that) {
+        this(that.getBlockX(), that.getBlockY(), that.getBlockZ());
+    }
+
+    public CraftBlockPosition(BlockPosition base, BlockPosition offset) {
+        this(base.getBlockX() + offset.getBlockX(),
+             base.getBlockY() + offset.getBlockY(),
+             base.getBlockZ() + offset.getBlockZ());
+    }
+
+    @Override
+    public int getBlockX() {
+        return getX();
+    }
+
+    @Override
+    public int getBlockY() {
+        return getY();
+    }
+
+    @Override
+    public int getBlockZ() {
+        return getZ();
+    }
+
+    @Override
+    public boolean isBlockZero() {
+        return getX() == 0 && getY() == 0 && getZ() == 0;
+    }
+
+    @Override
+    public int compareTo(BaseBlockPosition that) {
+        return i(that);
+    }
+
+    @Override
+    public BlockPosition clone() {
+        return new CraftBlockPosition(this);
+    }
+
+    @Override
+    public BlockPosition translate(BlockPosition offset) {
+        if(isBlockZero()) {
+            return this;
+        } else {
+            return new CraftBlockPosition(this, offset);
+        }
+    }
+
+    private static final CraftBlockPosition ZERO = new CraftBlockPosition(0, 0, 0);
+    public static CraftBlockPosition zero() { return ZERO; }
+
+    public static net.minecraft.server.BlockPosition nms(BlockPosition position) {
+        if(position instanceof net.minecraft.server.BlockPosition) {
+            return (net.minecraft.server.BlockPosition) position;
+        } else {
+            return new CraftBlockPosition(position);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCuboidRegion.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCuboidRegion.java
new file mode 100644
index 0000000..5b2a509
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCuboidRegion.java
@@ -0,0 +1,78 @@
+package org.bukkit.craftbukkit.block;
+
+import java.util.NoSuchElementException;
+
+import org.bukkit.block.BlockPosition;
+import org.bukkit.block.BlockPositionIterator;
+import org.bukkit.block.BlockRegion;
+
+public class CraftCuboidRegion implements BlockRegion {
+
+    private final BlockPosition min;
+    private final BlockPosition max; // Upper bound is exclusive
+
+    public CraftCuboidRegion(BlockPosition min, BlockPosition max) {
+        this.min = new CraftBlockPosition(min);
+        this.max = new CraftBlockPosition(max);
+    }
+
+    @Override
+    public boolean contains(BlockPosition position) {
+        return min.getBlockX() < position.getBlockX() && position.getBlockX() < max.getBlockX() &&
+               min.getBlockY() < position.getBlockY() && position.getBlockY() < max.getBlockY() &&
+               min.getBlockZ() < position.getBlockZ() && position.getBlockZ() < max.getBlockZ();
+    }
+
+    @Override
+    public BlockPositionIterator iterator() {
+        return new Iterator();
+    }
+
+    class Iterator extends CraftMutableBlockPosition implements BlockPositionIterator {
+        private final int xMin, yMin;
+        private final int xMax, yMax, zMax;
+        private int xNext, yNext, zNext;
+        private boolean hasNext;
+
+        public Iterator() {
+            this.x = this.xNext = this.xMin = min.getBlockX();
+            this.y = this.yNext = this.yMin = min.getBlockY();
+            this.z = this.zNext = min.getBlockZ();
+            this.xMax = max.getBlockX();
+            this.yMax = max.getBlockY();
+            this.zMax = max.getBlockZ();
+            this.hasNext = x < xMax && y < yMax && z < zMax;
+        }
+
+        @Override
+        public boolean hasNext() {
+            return hasNext;
+        }
+
+        @Override
+        public BlockPosition next() {
+            if(!hasNext) {
+                throw new NoSuchElementException();
+            }
+
+            set(xNext, yNext, zNext);
+
+            if(++xNext >= xMax) {
+                xNext = xMin;
+                if(++yNext >= yMax) {
+                    yNext = yMin;
+                    if(++zNext >= zMax) {
+                        hasNext = false;
+                    }
+                }
+            }
+
+            return this;
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftMutableBlockPosition.java b/src/main/java/org/bukkit/craftbukkit/block/CraftMutableBlockPosition.java
new file mode 100644
index 0000000..a927caa
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftMutableBlockPosition.java
@@ -0,0 +1,45 @@
+package org.bukkit.craftbukkit.block;
+
+import org.bukkit.block.BlockPosition;
+
+/**
+ * We know this will work because the NMS code does it too
+ * (see {@link net.minecraft.server.BlockPosition.MutableBlockPosition}).
+ * All other methods apparently go through the getX/Y/Z methods.
+ * However, we can't use their version because it's final.
+ */
+public class CraftMutableBlockPosition extends CraftBlockPosition {
+
+    protected int x, y, z;
+
+    public CraftMutableBlockPosition() {
+        super(0, 0, 0);
+    }
+
+    @Override
+    public int getX() {
+        return x;
+    }
+
+    @Override
+    public int getY() {
+        return y;
+    }
+
+    @Override
+    public int getZ() {
+        return z;
+    }
+
+    protected void set(int x, int y, int z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    @Override
+    public BlockPosition translate(BlockPosition offset) {
+        // Always make a copy
+        return new CraftBlockPosition(this, offset);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftRegionFactory.java b/src/main/java/org/bukkit/craftbukkit/block/CraftRegionFactory.java
new file mode 100644
index 0000000..ec36c59
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftRegionFactory.java
@@ -0,0 +1,27 @@
+package org.bukkit.craftbukkit.block;
+
+import org.bukkit.block.BlockPosition;
+import org.bukkit.block.BlockRegion;
+import org.bukkit.block.RegionFactory;
+
+public class CraftRegionFactory implements RegionFactory {
+
+    private static final CraftRegionFactory INSTANCE = new CraftRegionFactory();
+    public static CraftRegionFactory instance() { return INSTANCE; }
+
+    private CraftRegionFactory() {}
+
+    @Override
+    public BlockRegion cuboid(BlockPosition origin, BlockPosition size) {
+        return new CraftCuboidRegion(origin, origin.translate(size));
+    }
+
+    @Override
+    public BlockRegion translate(BlockRegion region, BlockPosition offset) {
+        if(offset.isBlockZero()) {
+            return region;
+        } else {
+            return new CraftTranslatedRegion(region, offset);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftTranslatedRegion.java b/src/main/java/org/bukkit/craftbukkit/block/CraftTranslatedRegion.java
new file mode 100644
index 0000000..5b27c56
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftTranslatedRegion.java
@@ -0,0 +1,51 @@
+package org.bukkit.craftbukkit.block;
+
+import org.bukkit.block.BlockPosition;
+import org.bukkit.block.BlockPositionIterator;
+import org.bukkit.block.BlockRegion;
+
+public class CraftTranslatedRegion implements BlockRegion {
+
+    private final BlockRegion region;
+    private final BlockPosition offset;
+
+    public CraftTranslatedRegion(BlockRegion region, BlockPosition offset) {
+        this.region = region;
+        this.offset = offset;
+    }
+
+    @Override
+    public boolean contains(BlockPosition position) {
+        return region.contains(new CraftBlockPosition(position.getBlockX() - offset.getBlockX(),
+                                                      position.getBlockY() - offset.getBlockY(),
+                                                      position.getBlockZ() - offset.getBlockZ()));
+    }
+
+    @Override
+    public BlockPositionIterator iterator() {
+        return new Iterator();
+    }
+
+    class Iterator extends CraftMutableBlockPosition implements BlockPositionIterator {
+        private final BlockPositionIterator iter = region.iterator();
+
+        @Override
+        public boolean hasNext() {
+            return iter.hasNext();
+        }
+
+        @Override
+        public BlockPosition next() {
+            BlockPosition p = iter.next();
+            set(p.getBlockX() + offset.getBlockX(),
+                p.getBlockY() + offset.getBlockY(),
+                p.getBlockZ() + offset.getBlockZ());
+            return this;
+        }
+
+        @Override
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    }
+}
-- 
1.9.0

