From 7426ec25d63d43fd7ef3489ed7591c74f1a3d135 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 19 May 2015 06:31:14 -0400
Subject: [PATCH] Item Attribute Modifier API


diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java
index 7c94acc..a385997 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java
@@ -17,23 +17,8 @@ public class CraftAttributeMap implements Attributable {
     @Override
     public AttributeInstance getAttribute(Attribute attribute) {
         Preconditions.checkArgument(attribute != null, "attribute");
-        net.minecraft.server.AttributeInstance nms = handle.a(toMinecraft(attribute.name()));
+        net.minecraft.server.AttributeInstance nms = handle.a(attribute.getName());
 
         return (nms == null) ? null : new CraftAttributeInstance(nms, attribute);
     }
-
-    static String toMinecraft(String bukkit) {
-        int first = bukkit.indexOf('_');
-        int second = bukkit.indexOf('_', first + 1);
-
-        StringBuilder sb = new StringBuilder(bukkit.toLowerCase());
-
-        sb.setCharAt(first, '.');
-        if (second != -1) {
-            sb.deleteCharAt(second);
-            sb.setCharAt(second, bukkit.charAt(second + 1));
-        }
-
-        return sb.toString();
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index eaf2a0a..5e14a17 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -8,11 +8,15 @@ import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
 
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.SetMultimap;
 import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
@@ -20,6 +24,8 @@ import net.minecraft.server.NBTTagString;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.configuration.serialization.SerializableAs;
@@ -206,9 +212,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
     @Specific(Specific.To.NBT)
     static final ItemMetaKey ATTRIBUTES_TYPE = new ItemMetaKey("Operation");
     @Specific(Specific.To.NBT)
-    static final ItemMetaKey ATTRIBUTES_UUID_HIGH = new ItemMetaKey("UUIDMost");
-    @Specific(Specific.To.NBT)
-    static final ItemMetaKey ATTRIBUTES_UUID_LOW = new ItemMetaKey("UUIDLeast");
+    static final ItemMetaKey ATTRIBUTES_UUID = new ItemMetaKey("UUID");
     @Specific(Specific.To.NBT)
     static final ItemMetaKey HIDEFLAGS = new ItemMetaKey("HideFlags", "ItemFlags");
     static final ItemMetaKey UNBREAKABLE = new ItemMetaKey("Unbreakable", "unbreakable");
@@ -218,6 +222,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
     private Map<Enchantment, Integer> enchantments;
     private int repairCost;
     private int hideFlag;
+    private SetMultimap<String, AttributeModifier> attributeModifiers;
     private boolean unbreakable;
 
     private static final Set<String> HANDLED_TAGS = Sets.newHashSet();
@@ -226,6 +231,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
     CraftMetaItem(CraftMetaItem meta) {
         if (meta == null) {
+            attributeModifiers = null;
             return;
         }
 
@@ -239,6 +245,10 @@ class CraftMetaItem implements ItemMeta, Repairable {
             this.enchantments = new HashMap<Enchantment, Integer>(meta.enchantments);
         }
 
+        if(meta.hasAttributeModifiers()) {
+            this.attributeModifiers = HashMultimap.create(meta.attributeModifiers);
+        }
+
         this.repairCost = meta.repairCost;
         this.hideFlag = meta.hideFlag;
         this.unbreakable = meta.unbreakable;
@@ -266,6 +276,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
         this.enchantments = buildEnchantments(tag, ENCHANTMENTS);
 
+        this.attributeModifiers = buildAttributeModifiers(tag);
+
         if (tag.hasKey(REPAIR.NBT)) {
             repairCost = tag.getInt(REPAIR.NBT);
         }
@@ -274,52 +286,6 @@ class CraftMetaItem implements ItemMeta, Repairable {
             hideFlag = tag.getInt(HIDEFLAGS.NBT);
         }
 
-        if (tag.get(ATTRIBUTES.NBT) instanceof NBTTagList) {
-            NBTTagList save = null;
-            NBTTagList nbttaglist = tag.getList(ATTRIBUTES.NBT, 10);
-
-            for (int i = 0; i < nbttaglist.size(); ++i) {
-                if (!(nbttaglist.get(i) instanceof NBTTagCompound)) {
-                    continue;
-                }
-                NBTTagCompound nbttagcompound = (NBTTagCompound) nbttaglist.get(i);
-
-                if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_UUID_HIGH.NBT, 99)) {
-                    continue;
-                }
-                if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_UUID_LOW.NBT, 99)) {
-                    continue;
-                }
-                if (!(nbttagcompound.get(ATTRIBUTES_IDENTIFIER.NBT) instanceof NBTTagString) || !CraftItemFactory.KNOWN_NBT_ATTRIBUTE_NAMES.contains(nbttagcompound.getString(ATTRIBUTES_IDENTIFIER.NBT))) {
-                    continue;
-                }
-                if (!(nbttagcompound.get(ATTRIBUTES_NAME.NBT) instanceof NBTTagString) || nbttagcompound.getString(ATTRIBUTES_NAME.NBT).isEmpty()) {
-                    continue;
-                }
-                if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_VALUE.NBT, 99)) {
-                    continue;
-                }
-                if (!nbttagcompound.hasKeyOfType(ATTRIBUTES_TYPE.NBT, 99) || nbttagcompound.getInt(ATTRIBUTES_TYPE.NBT) < 0 || nbttagcompound.getInt(ATTRIBUTES_TYPE.NBT) > 2) {
-                    continue;
-                }
-
-                if (save == null) {
-                    save = new NBTTagList();
-                }
-
-                NBTTagCompound entry = new NBTTagCompound();
-                entry.set(ATTRIBUTES_UUID_HIGH.NBT, nbttagcompound.get(ATTRIBUTES_UUID_HIGH.NBT));
-                entry.set(ATTRIBUTES_UUID_LOW.NBT, nbttagcompound.get(ATTRIBUTES_UUID_LOW.NBT));
-                entry.set(ATTRIBUTES_IDENTIFIER.NBT, nbttagcompound.get(ATTRIBUTES_IDENTIFIER.NBT));
-                entry.set(ATTRIBUTES_NAME.NBT, nbttagcompound.get(ATTRIBUTES_NAME.NBT));
-                entry.set(ATTRIBUTES_VALUE.NBT, nbttagcompound.get(ATTRIBUTES_VALUE.NBT));
-                entry.set(ATTRIBUTES_TYPE.NBT, nbttagcompound.get(ATTRIBUTES_TYPE.NBT));
-                save.add(entry);
-            }
-
-            unhandledTags.put(ATTRIBUTES.NBT, save);
-        }
-
         unbreakable = tag.getBoolean(UNBREAKABLE.NBT);
 
         Set<String> keys = tag.c();
@@ -348,6 +314,28 @@ class CraftMetaItem implements ItemMeta, Repairable {
         return enchantments;
     }
 
+    static AttributeModifier buildAttributeModifier(NBTTagCompound tag) {
+        return new AttributeModifier(tag.a(ATTRIBUTES_UUID.NBT),
+                                     tag.getString(ATTRIBUTES_NAME.NBT),
+                                     tag.getDouble(ATTRIBUTES_VALUE.NBT),
+                                     AttributeModifier.Operation.fromOpcode(tag.getInt(ATTRIBUTES_TYPE.NBT)));
+    }
+
+    static SetMultimap<String, AttributeModifier> buildAttributeModifiers(NBTTagCompound tag) {
+        if(!tag.hasKey(ATTRIBUTES.NBT)) return null;
+
+        final SetMultimap<String, AttributeModifier> attributeModifiers = HashMultimap.create();
+
+        final NBTTagList modTags = tag.getList(ATTRIBUTES.NBT, 10);
+        for(int i = 0; i < modTags.size(); i++) {
+            final NBTTagCompound modTag = modTags.get(i);
+            attributeModifiers.put(modTag.getString(ATTRIBUTES_IDENTIFIER.NBT),
+                                   buildAttributeModifier(modTag));
+        }
+
+        return attributeModifiers;
+    }
+
     CraftMetaItem(Map<String, Object> map) {
         setDisplayName(SerializableMeta.getString(map, NAME.BUKKIT, true));
 
@@ -363,6 +351,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
             setRepairCost(repairCost);
         }
 
+        attributeModifiers = null; // No Bukkit serialization for attributes
+
         Set hideFlags = SerializableMeta.getObject(Set.class, map, HIDEFLAGS.BUKKIT, true);
         if (hideFlags != null) {
             for (Object hideFlagObject : hideFlags) {
@@ -436,6 +426,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
             itemTag.setInt(REPAIR.NBT, repairCost);
         }
 
+        copyAttributeModifiers(itemTag);
+
         if(unbreakable) {
             itemTag.setBoolean(UNBREAKABLE.NBT, true);
         }
@@ -477,6 +469,27 @@ class CraftMetaItem implements ItemMeta, Repairable {
         tag.set(key.NBT, list);
     }
 
+    static NBTTagCompound createAttributeModifierTag(AttributeModifier modifier) {
+        NBTTagCompound tag = new NBTTagCompound();
+        tag.setString(ATTRIBUTES_NAME.NBT, modifier.getName());
+        tag.setDouble(ATTRIBUTES_VALUE.NBT, modifier.getAmount());
+        tag.setInt(ATTRIBUTES_TYPE.NBT, modifier.getOperation().ordinal());
+        tag.a(ATTRIBUTES_UUID.NBT, modifier.getUniqueId());
+        return tag;
+    }
+
+    void copyAttributeModifiers(NBTTagCompound tag) {
+        if(!hasAttributeModifiers()) return;
+
+        NBTTagList list = new NBTTagList();
+        for(Map.Entry<String, AttributeModifier> entry : attributeModifiers.entries()) {
+            NBTTagCompound mod = createAttributeModifierTag(entry.getValue());
+            mod.setString(ATTRIBUTES_IDENTIFIER.NBT, entry.getKey());
+            list.add(mod);
+        }
+        tag.set(ATTRIBUTES.NBT, list);
+    }
+
     void setDisplayTag(NBTTagCompound tag, String key, NBTBase value) {
         final NBTTagCompound display = tag.getCompound(DISPLAY.NBT);
 
@@ -494,7 +507,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
     @Overridden
     boolean isEmpty() {
-        return !(hasDisplayName() || hasEnchants() || hasLore() || hasRepairCost() || unbreakable || !unhandledTags.isEmpty() || hideFlag != 0);
+        return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributeModifiers() || hasRepairCost() || unbreakable || !unhandledTags.isEmpty() || hideFlag != 0);
     }
 
     public String getDisplayName() {
@@ -558,6 +571,69 @@ class CraftMetaItem implements ItemMeta, Repairable {
     }
 
     @Override
+    public boolean hasAttributeModifiers() {
+        return attributeModifiers != null && !attributeModifiers.isEmpty();
+    }
+
+    @Override
+    public Collection<String> getModifiedAttributes() {
+        return hasAttributeModifiers() ? ImmutableSet.copyOf(attributeModifiers.keySet()) : Collections.<String>emptySet();
+    }
+
+    @Override
+    public boolean hasModifiedAttribute(String attribute) {
+        return hasAttributeModifiers() && attributeModifiers.containsKey(attribute);
+    }
+
+    @Override
+    public boolean hasModifiedAttribute(Attribute attribute) {
+        return hasModifiedAttribute(attribute.getName());
+    }
+
+    @Override
+    public Collection<AttributeModifier> getAttributeModifiers(String attribute) {
+        return hasAttributeModifiers() ? attributeModifiers.get(attribute) : Collections.<AttributeModifier>emptySet();
+    }
+
+    @Override
+    public Collection<AttributeModifier> getAttributeModifiers(Attribute attribute) {
+        return getAttributeModifiers(attribute.getName());
+    }
+
+    @Override
+    public boolean hasAttributeModifier(String attribute, AttributeModifier modifier) {
+        return hasAttributeModifiers() && attributeModifiers.containsEntry(attribute, modifier);
+    }
+
+    @Override
+    public boolean hasAttributeModifier(Attribute attribute, AttributeModifier modifier) {
+        return hasAttributeModifier(attribute.getName(), modifier);
+    }
+
+    @Override
+    public void addAttributeModifier(String attribute, AttributeModifier modifier) {
+        if(attributeModifiers == null) attributeModifiers = HashMultimap.create();
+        attributeModifiers.put(attribute, modifier);
+    }
+
+    @Override
+    public void addAttributeModifier(Attribute attribute, AttributeModifier modifier) {
+        addAttributeModifier(attribute.getName(), modifier);
+    }
+
+    @Override
+    public void removeAttributeModifier(String attribute, AttributeModifier modifier) {
+        if(attributeModifiers != null) {
+            attributeModifiers.remove(attribute, modifier);
+        }
+    }
+
+    @Override
+    public void removeAttributeModifier(Attribute attribute, AttributeModifier modifier) {
+        removeAttributeModifier(attribute.getName(), modifier);
+    }
+
+    @Override
     public void addItemFlags(ItemFlag... hideFlags) {
         for (ItemFlag f : hideFlags) {
             this.hideFlag |= getBitModifier(f);
@@ -653,6 +729,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
         return ((this.hasDisplayName() ? that.hasDisplayName() && this.displayName.equals(that.displayName) : !that.hasDisplayName()))
                 && (this.hasEnchants() ? that.hasEnchants() && this.enchantments.equals(that.enchantments) : !that.hasEnchants())
                 && (this.hasLore() ? that.hasLore() && this.lore.equals(that.lore) : !that.hasLore())
+                && (this.hasAttributeModifiers() ? that.hasAttributeModifiers() && this.attributeModifiers.equals(that.attributeModifiers) : !that.hasAttributeModifiers())
                 && (this.hasRepairCost() ? that.hasRepairCost() && this.repairCost == that.repairCost : !that.hasRepairCost())
                 && this.unbreakable == that.unbreakable
                 && (this.unhandledTags.equals(that.unhandledTags))
@@ -680,6 +757,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
         hash = 61 * hash + (hasDisplayName() ? this.displayName.hashCode() : 0);
         hash = 61 * hash + (hasLore() ? this.lore.hashCode() : 0);
         hash = 61 * hash + (hasEnchants() ? this.enchantments.hashCode() : 0);
+        hash = 61 * hash + (hasAttributeModifiers() ? this.attributeModifiers.hashCode() : 0);
         hash = 61 * hash + (hasRepairCost() ? this.repairCost : 0);
         hash = 61 * hash + (unbreakable ? 1 : 0);
         hash = 61 * hash + unhandledTags.hashCode();
@@ -698,6 +776,9 @@ class CraftMetaItem implements ItemMeta, Repairable {
             if (this.enchantments != null) {
                 clone.enchantments = new HashMap<Enchantment, Integer>(this.enchantments);
             }
+            if (this.attributeModifiers != null) {
+                clone.attributeModifiers = HashMultimap.create(this.attributeModifiers);
+            }
             clone.hideFlag = this.hideFlag;
             return clone;
         } catch (CloneNotSupportedException e) {
@@ -825,6 +906,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                         DISPLAY.NBT,
                         REPAIR.NBT,
                         ENCHANTMENTS.NBT,
+                        ATTRIBUTES.NBT,
                         HIDEFLAGS.NBT,
                         UNBREAKABLE.NBT,
                         CraftMetaMap.MAP_SCALING.NBT,
-- 
1.9.0

