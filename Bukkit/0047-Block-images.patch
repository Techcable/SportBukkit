From 8b2bfd9c82c53fa0152ac4588bbedf66cb3361ef Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Wed, 1 Jul 2015 12:40:49 -0400
Subject: [PATCH] Block images


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 2255c9d..7675e61 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -13,6 +13,7 @@ import java.util.UUID;
 import java.util.logging.Logger;
 
 import org.bukkit.Warning.WarningState;
+import org.bukkit.block.RegionFactory;
 import org.bukkit.boss.BarColor;
 import org.bukkit.boss.BarFlag;
 import org.bukkit.boss.BarStyle;
@@ -1095,6 +1096,13 @@ public final class Bukkit {
     }
 
     /**
+     * Get the region factory.
+     */
+    public static RegionFactory getRegionFactory() {
+        return server.getRegionFactory();
+    }
+
+    /**
      * Gets the instance of the scoreboard manager.
      * <p>
      * This will only exist after the first world has loaded.
@@ -1181,12 +1189,12 @@ public final class Bukkit {
 
     /**
      * Create a ChunkData for use in a generator.
-     * 
+     *
      * See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}
-     * 
+     *
      * @param world the world to create the ChunkData for
      * @return a new ChunkData for the world
-     * 
+     *
      */
     public static ChunkGenerator.ChunkData createChunkData(World world) {
         return server.createChunkData(world);
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 090dddc..bfc88a7 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -13,6 +13,7 @@ import java.util.UUID;
 import java.util.logging.Logger;
 
 import org.bukkit.Warning.WarningState;
+import org.bukkit.block.RegionFactory;
 import org.bukkit.boss.BarColor;
 import org.bukkit.boss.BarFlag;
 import org.bukkit.boss.BarStyle;
@@ -908,6 +909,11 @@ public interface Server extends PluginMessageRecipient {
     ItemFactory getItemFactory();
 
     /**
+     * Get the region factory.
+     */
+    RegionFactory getRegionFactory();
+
+    /**
      * Gets the instance of the scoreboard manager.
      * <p>
      * This will only exist after the first world has loaded.
@@ -982,12 +988,12 @@ public interface Server extends PluginMessageRecipient {
 
     /**
      * Create a ChunkData for use in a generator.
-     * 
+     *
      * See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}
-     * 
+     *
      * @param world the world to create the ChunkData for
      * @return a new ChunkData for the world
-     * 
+     *
      */
     public ChunkGenerator.ChunkData createChunkData(World world);
 
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 48afc49..6d4eabe 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1,6 +1,10 @@
 package org.bukkit;
 
 import java.io.File;
+
+import org.bukkit.block.BlockImage;
+import org.bukkit.block.BlockPosition;
+import org.bukkit.block.BlockRegion;
 import org.bukkit.generator.ChunkGenerator;
 import java.util.Collection;
 import java.util.HashMap;
@@ -1440,6 +1444,27 @@ public interface World extends PluginMessageRecipient, Metadatable {
      */
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data);
 
+    /**
+     * Copy block states in the specified region to a saved image.
+     * @return A copy of the specified block states
+     */
+    BlockImage copyBlocks(BlockRegion region, boolean includeAir, boolean clearSource);
+
+    /**
+     * Copy block states in the given saved image to the given position
+     * in this world.
+     * @param image Block image to copy
+     * @param offset Offset of copied blocks from their original position in the image.
+     * @return The number of blocks in this world affected by the operation.
+     */
+    int pasteBlocks(BlockImage image, BlockPosition offset);
+
+    /**
+     * Copy block states in the given saved image to their original position.
+     * @param image Block image to copy
+     * @return The number of blocks in this world affected by the operation.
+     */
+    int pasteBlocks(BlockImage image);
 
     /**
      * Represents various map environment types that a world may be
diff --git a/src/main/java/org/bukkit/block/BlockImage.java b/src/main/java/org/bukkit/block/BlockImage.java
new file mode 100644
index 0000000..c7ed2ad
--- /dev/null
+++ b/src/main/java/org/bukkit/block/BlockImage.java
@@ -0,0 +1,30 @@
+package org.bukkit.block;
+
+import java.util.UUID;
+
+import org.bukkit.World;
+
+/**
+ * A set of saved block states.
+ * TODO: Provide a way to actually get {@link BlockState}s from one of these.
+ */
+public interface BlockImage {
+    /**
+     * Unique ID of the {@link World} this image was created from.
+     * This world may or may not still exist. This object does not hold any
+     * reference to the world it came from.
+     */
+    UUID getWorldId();
+
+    /**
+     * The {@link World} this image was created from, or null if
+     * that world is not currently loaded.
+     */
+    World getWorld();
+
+    /**
+     * The set of blocks included in this image. Any blocks excluded from the image
+     * (e.g. air blocks) will also be exlcuded from this region.
+     */
+    BlockRegion getRegion();
+}
diff --git a/src/main/java/org/bukkit/block/BlockPosition.java b/src/main/java/org/bukkit/block/BlockPosition.java
new file mode 100644
index 0000000..4e5cf1b
--- /dev/null
+++ b/src/main/java/org/bukkit/block/BlockPosition.java
@@ -0,0 +1,37 @@
+package org.bukkit.block;
+
+/**
+ * Represents the coordinates of a block. Though this interface has no mutating methods,
+ * implementations are not necessarily immutable.
+ *
+ * TODO: More transforms, support for this in other parts of the Bukkit API
+ */
+public interface BlockPosition extends Cloneable {
+
+    int getBlockX();
+
+    int getBlockY();
+
+    int getBlockZ();
+
+    /**
+     * Are the block coordinates of this object all zero?
+     */
+    boolean isBlockZero();
+
+    /**
+     * Return a block position equal to this one translated by the given
+     * offset. The translation is performed in block space, in other words,
+     * the block coordinates of the returned object will be the sum of
+     * the block coordinates of this object and the given offset.
+     *
+     * This method is guaranteed not to modify this object. If the offset
+     * is zero, it may return this object.
+     */
+    BlockPosition translate(BlockPosition offset);
+
+    /**
+     * Return a new position object that is equal to this one.
+     */
+    BlockPosition clone();
+}
diff --git a/src/main/java/org/bukkit/block/BlockPositionIterator.java b/src/main/java/org/bukkit/block/BlockPositionIterator.java
new file mode 100644
index 0000000..4ccef6b
--- /dev/null
+++ b/src/main/java/org/bukkit/block/BlockPositionIterator.java
@@ -0,0 +1,17 @@
+package org.bukkit.block;
+
+import java.util.Iterator;
+
+/**
+ * A mutable {@link BlockPosition} used to iterate over some sequence of values.
+ * The iterator itself takes on the values it is iterating over, and returns itself
+ * from the {@link #next()} method, thus avoiding creating a new object for each iteration.
+ *
+ * The {@link #next()} method must be called at least once before reading the
+ * value of the iterator i.e. before calling any of the methods in {@link BlockPosition}.
+ * The result of calling these methods before the first iteration is undefined.
+ * If iterating over an empty sequence, the iterator cannot be advanced and thus
+ * never has a defined value.
+ */
+public interface BlockPositionIterator extends BlockPosition, Iterator<BlockPosition> {
+}
diff --git a/src/main/java/org/bukkit/block/BlockRegion.java b/src/main/java/org/bukkit/block/BlockRegion.java
new file mode 100644
index 0000000..32a3caf
--- /dev/null
+++ b/src/main/java/org/bukkit/block/BlockRegion.java
@@ -0,0 +1,12 @@
+package org.bukkit.block;
+
+/**
+ * Represents a set of block coordinates, and supports iteration over them and tests for inclusion.
+ */
+public interface BlockRegion extends Iterable<BlockPosition> {
+
+    boolean contains(BlockPosition position);
+
+    @Override
+    BlockPositionIterator iterator();
+}
diff --git a/src/main/java/org/bukkit/block/RegionFactory.java b/src/main/java/org/bukkit/block/RegionFactory.java
new file mode 100644
index 0000000..87cc429
--- /dev/null
+++ b/src/main/java/org/bukkit/block/RegionFactory.java
@@ -0,0 +1,17 @@
+package org.bukkit.block;
+
+/**
+ * It makes regions.
+ */
+public interface RegionFactory {
+
+    /**
+     * @return a cuboid shaped region with the given minimum-valued corner and size
+     */
+    BlockRegion cuboid(BlockPosition origin, BlockPosition size);
+
+    /**
+     * @return the given region translated by the given offset. If the offset is zero, it may return the same region given.
+     */
+    BlockRegion translate(BlockRegion region, BlockPosition offset);
+}
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index cebd3cc..a81ce4d 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -5,6 +5,7 @@ import java.util.Map;
 import java.util.Random;
 import org.bukkit.Location;
 import org.bukkit.World;
+import org.bukkit.block.BlockPosition;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import static org.bukkit.util.NumberConversions.checkFinite;
@@ -16,7 +17,7 @@ import static org.bukkit.util.NumberConversions.checkFinite;
  * <code>clone()</code> in order to get a copy.
  */
 @SerializableAs("Vector")
-public class Vector implements Cloneable, ConfigurationSerializable {
+public class Vector implements Cloneable, ConfigurationSerializable, BlockPosition {
     private static final long serialVersionUID = -2657651106777219169L;
 
     private static Random random = new Random();
@@ -78,6 +79,18 @@ public class Vector implements Cloneable, ConfigurationSerializable {
         this.z = z;
     }
 
+    @Override
+    public boolean isBlockZero() {
+        return x == 0d && y == 0d && z == 0d;
+    }
+
+    @Override
+    public Vector translate(BlockPosition offset) {
+        return new Vector(x + offset.getBlockX(),
+                          y + offset.getBlockY(),
+                          z + offset.getBlockZ());
+    }
+
     /**
      * Adds a vector to this one
      *
-- 
1.9.0

