From 89e73caf992a19e39ef57e9c223d4513b0f38082 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Thu, 10 Mar 2016 15:07:43 -0500
Subject: [PATCH] Registration API


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index fc781e9..cc56b6f 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -37,6 +37,7 @@ import org.bukkit.permissions.Permissible;
 import org.bukkit.plugin.PluginManager;
 import org.bukkit.plugin.ServicesManager;
 import org.bukkit.plugin.messaging.Messenger;
+import org.bukkit.registry.Key;
 import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.scoreboard.ScoreboardManager;
 import org.bukkit.util.CachedServerIcon;
@@ -52,6 +53,7 @@ import org.bukkit.inventory.meta.ItemMeta;
  * Represents the Bukkit core, for version and Server singleton handling
  */
 public final class Bukkit {
+    private static BukkitRuntime runtime;
     private static Server server;
 
     /**
@@ -59,6 +61,24 @@ public final class Bukkit {
      */
     private Bukkit() {}
 
+    public static BukkitRuntime runtime() {
+        if(runtime == null) {
+            throw new IllegalStateException("No Bukkit runtime defined");
+        }
+        return runtime;
+    }
+
+    public static BukkitRuntime getRuntime() {
+        return runtime;
+    }
+
+    public static void setRuntime(BukkitRuntime runtime) {
+        if(runtime != null && Bukkit.runtime != null) {
+            throw new UnsupportedOperationException("Cannot redefine Bukkit runtime");
+        }
+        Bukkit.runtime = runtime;
+    }
+
     /**
      * Gets the current {@link Server} singleton
      *
@@ -79,7 +99,7 @@ public final class Bukkit {
         if (Bukkit.server != null) {
             throw new UnsupportedOperationException("Cannot redefine singleton Server");
         }
-
+        setRuntime(server);
         Bukkit.server = server;
         server.getLogger().info("This server is running " + getName() + " version " + getVersion() + " (Implementing API version " + getBukkitVersion() + ")");
     }
@@ -1125,14 +1145,14 @@ public final class Bukkit {
      * @see ItemFactory
      */
     public static ItemFactory getItemFactory() {
-        return server.getItemFactory();
+        return runtime().getItemFactory();
     }
 
     /**
      * Get the region factory.
      */
     public static RegionFactory getRegionFactory() {
-        return server.getRegionFactory();
+        return runtime().getRegionFactory();
     }
 
     /**
@@ -1273,4 +1293,12 @@ public final class Bukkit {
     public static void broadcast(net.md_5.bungee.api.chat.BaseComponent... components) {
         server.broadcast(components);
     }
+
+    public static Key key(String prefix, String id) {
+        return runtime().key(prefix, id);
+    }
+
+    public static Key key(String id) {
+        return runtime().key(id);
+    }
 }
diff --git a/src/main/java/org/bukkit/BukkitRuntime.java b/src/main/java/org/bukkit/BukkitRuntime.java
new file mode 100644
index 0000000..732110a
--- /dev/null
+++ b/src/main/java/org/bukkit/BukkitRuntime.java
@@ -0,0 +1,26 @@
+package org.bukkit;
+
+import org.bukkit.block.RegionFactory;
+import org.bukkit.inventory.ItemFactory;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.registry.Key;
+
+public interface BukkitRuntime {
+    Key key(String prefix, String id);
+
+    Key key(String key);
+
+    /**
+     * Gets the instance of the item factory (for {@link ItemMeta}).
+     *
+     * @return the item factory
+     * @see ItemFactory
+     */
+    ItemFactory getItemFactory();
+
+    /**
+     * Get the region factory.
+     */
+    RegionFactory getRegionFactory();
+
+}
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index f147c43..bdfe2dc 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -52,7 +52,7 @@ import org.bukkit.inventory.meta.ItemMeta;
 /**
  * Represents a server implementation.
  */
-public interface Server extends PluginMessageRecipient, tc.oc.minecraft.api.server.LocalServer {
+public interface Server extends PluginMessageRecipient, BukkitRuntime, tc.oc.minecraft.api.server.LocalServer {
 
     /**
      * Used for all administrative messages, such as an operator using a
diff --git a/src/main/java/org/bukkit/registry/Key.java b/src/main/java/org/bukkit/registry/Key.java
new file mode 100644
index 0000000..b8ce9e4
--- /dev/null
+++ b/src/main/java/org/bukkit/registry/Key.java
@@ -0,0 +1,6 @@
+package org.bukkit.registry;
+
+public interface Key {
+    String prefix();
+    String id();
+}
diff --git a/src/main/java/org/bukkit/registry/Registerable.java b/src/main/java/org/bukkit/registry/Registerable.java
new file mode 100644
index 0000000..4c22aea
--- /dev/null
+++ b/src/main/java/org/bukkit/registry/Registerable.java
@@ -0,0 +1,5 @@
+package org.bukkit.registry;
+
+public interface Registerable {
+    Key key();
+}
diff --git a/src/main/java/org/bukkit/registry/Registry.java b/src/main/java/org/bukkit/registry/Registry.java
new file mode 100644
index 0000000..7c7c2bf
--- /dev/null
+++ b/src/main/java/org/bukkit/registry/Registry.java
@@ -0,0 +1,15 @@
+package org.bukkit.registry;
+
+import java.util.NoSuchElementException;
+import java.util.Set;
+
+public interface Registry<V extends Registerable> extends Iterable<V> {
+
+    V get(Key key);
+
+    V need(Key key) throws NoSuchElementException;
+
+    boolean containsKey(Key key);
+
+    Set<Key> keySet();
+}
-- 
1.9.0

